{
  "requesterUsername": "jasonho2582001",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/jasonho2582001",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com"
  },
  "responderUsername": "GitHub Copilot",
  "welcomeMessage": [
    "Welcome, **@jasonho2582001**, I'm your Copilot and I'm here to help you get things done faster. You can also [start an inline chat session](command:workbench.action.quickchat.launchInlineChat).",
    "I'm powered by AI, so surprises and mistakes are possible. Make sure to verify any generated code or suggestions, and [share feedback](https://aka.ms/microsoft/vscode-copilot-release) so that we can learn and improve. Check out the [Copilot documentation](https://code.visualstudio.com/docs/editor/github-copilot#_chat-view) to learn more."
  ],
  "requests": [
    {
      "message": {
        "text": "What is the pytest fixture that runs at the start of pytest",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 59
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 60
            },
            "text": "What is the pytest fixture that runs at the start of pytest",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What is the pytest fixture that runs at the start of pytest"
      },
      "response": [
        {
          "value": "The pytest fixture that runs at the start of pytest is typically defined using the `@pytest.fixture(scope='session')` decorator. This fixture will run once per session. Here's an example:\n\n```python\nimport pytest\n\n@pytest.fixture(scope='session', autouse=True)\ndef setup_session():\n    print(\"\\nSetup Session\")\n```\n\nIn this example, `setup_session` is a fixture that will run once at the start of the pytest session due to the `scope='session'` parameter. The `autouse=True` parameter means this fixture is automatically used without having to be mentioned in the test function parameters.",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "How can I skip a pytest fixture for a specific test?",
          "title": "How can I skip a pytest fixture for a specific test?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "copilot",
        "metadata": {
          "description": "",
          "fullName": "GitHub Copilot",
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isDefault": true,
          "helpTextPrefix": "You can ask me general programming questions, or chat with the following agents which have specialized expertise and can perform actions:",
          "helpTextPostfix": {
            "value": "To have a great conversation, ask me questions as if I was a real programmer:\n\n* **Show me the code** you want to talk about by having the files open and selecting the most important lines.\n* **Make refinements** by asking me follow-up questions, adding clarifications, providing errors, etc.\n* **Review my suggested code** and tell me about issues or improvements, so I can iterate on it.\n\nYou can also ask me questions about your editor selection by [starting an inline chat session](command:inlineChat.start).\n\nLearn more about [GitHub Copilot](https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode) in [Visual Studio Code](https://code.visualstudio.com/docs/editor/artificial-intelligence).",
            "isTrusted": {
              "enabledCommands": [
                "inlineChat.start"
              ]
            },
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "command:inlineChat.start": {
                "$mid": 1,
                "path": "inlineChat.start",
                "scheme": "command"
              },
              "https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode": {
                "$mid": 1,
                "path": "/copilot/getting-started-with-github-copilot",
                "scheme": "https",
                "authority": "docs.github.com",
                "query": "tool=vscode"
              },
              "https://code.visualstudio.com/docs/editor/artificial-intelligence": {
                "$mid": 1,
                "path": "/docs/editor/artificial-intelligence",
                "scheme": "https",
                "authority": "code.visualstudio.com"
              }
            }
          },
          "supportIssueReporting": false
        }
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace What source code file do you think the file test_ssl is testing?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 75
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 76
            },
            "text": " What source code file do you think the file test_ssl is testing?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What source code file do you think the file test_ssl is testing?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the typical conventions of Python projects, the `test_ssl.py` file (which is not visible in the provided workspace structure but I assume it's in the [`tests/`](command:_github.copilot.openRelativePath?%5B%22tests%2F%22%5D \"tests/\") directory) would likely be testing the `ssl.py` file in the [`src/`](command:_github.copilot.openRelativePath?%5B%22src%2F%22%5D \"src/\") directory. However, without the `ssl.py` file visible in the provided workspace structure, I can't confirm this. \n\nIf the `ssl.py` file exists in your [`src/`](command:_github.copilot.openRelativePath?%5B%22src%2F%22%5D \"src/\") directory, then it's likely that `test_ssl.py` is testing the functionality implemented in `src/ssl.py`.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some common pytest fixtures used for testing Python code?",
          "title": "What are some common pytest fixtures used for testing Python code?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace which file has the most lines of code?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 49
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 50
            },
            "text": " which file has the most lines of code?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "which file has the most lines of code?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "I'm sorry, I can't answer that question with what I currently know about your workspace. I would need to analyze the line count of each file in your workspace to determine which file has the most lines of code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false,
          "uris": {}
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What is the purpose of the `PytestTracer` class in the `pytest_tracer.py` file?",
          "title": "What is the purpose of the `PytestTracer` class in the `pytest_tracer.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "scheme": "file"
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "What is the purpose of the `PytestTracer` class in the `pytest_tracer.py` file?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 79
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 80
            },
            "text": "What is the purpose of the `PytestTracer` class in the `pytest_tracer.py` file?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What is the purpose of the `PytestTracer` class in the `pytest_tracer.py` file?"
      },
      "response": [
        {
          "value": "I'm sorry, but without access to the actual content of the `pytest_tracer.py` file, I can't provide a specific explanation of the `PytestTracer` class. \n\nHowever, based on the name, `PytestTracer` might be a class that is used to trace the execution of tests in pytest. It could be used for logging, debugging, or collecting metadata about the tests. It might implement methods that are called at various points in the test execution lifecycle, such as setup, teardown, and each test case execution. \n\nPlease refer to the comments or documentation in your `pytest_tracer.py` file for a precise explanation of the `PytestTracer` class's purpose.",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some best practices for writing unit tests in Python?",
          "title": "What are some best practices for writing unit tests in Python?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "copilot",
        "metadata": {
          "description": "",
          "fullName": "GitHub Copilot",
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isDefault": true,
          "helpTextPrefix": "You can ask me general programming questions, or chat with the following agents which have specialized expertise and can perform actions:",
          "helpTextPostfix": {
            "value": "To have a great conversation, ask me questions as if I was a real programmer:\n\n* **Show me the code** you want to talk about by having the files open and selecting the most important lines.\n* **Make refinements** by asking me follow-up questions, adding clarifications, providing errors, etc.\n* **Review my suggested code** and tell me about issues or improvements, so I can iterate on it.\n\nYou can also ask me questions about your editor selection by [starting an inline chat session](command:inlineChat.start).\n\nLearn more about [GitHub Copilot](https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode) in [Visual Studio Code](https://code.visualstudio.com/docs/editor/artificial-intelligence).",
            "isTrusted": {
              "enabledCommands": [
                "inlineChat.start"
              ]
            },
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "command:inlineChat.start": {
                "$mid": 1,
                "path": "inlineChat.start",
                "scheme": "command"
              },
              "https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode": {
                "$mid": 1,
                "path": "/copilot/getting-started-with-github-copilot",
                "scheme": "https",
                "authority": "docs.github.com",
                "query": "tool=vscode"
              },
              "https://code.visualstudio.com/docs/editor/artificial-intelligence": {
                "$mid": 1,
                "path": "/docs/editor/artificial-intelligence",
                "scheme": "https",
                "authority": "code.visualstudio.com"
              }
            }
          },
          "supportIssueReporting": false
        }
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace What is the purpose of the PytestTracer class in the pytest_tracer.py file?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 86
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 87
            },
            "text": " What is the purpose of the PytestTracer class in the pytest_tracer.py file?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What is the purpose of the PytestTracer class in the pytest_tracer.py file?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The [`PytestTracer`](command:_github.copilot.openSymbolInFile?%5B%22pytest_tracer.py%22%2C%22PytestTracer%22%5D \"pytest_tracer.py\") class in the [`pytest_tracer.py`](command:_github.copilot.openSymbolInFile?%5B%22pytest_tracer.py%22%2C%22pytest_tracer.py%22%5D \"pytest_tracer.py\") file is designed to trace the execution of pytest tests. It logs information about the execution of each function call, including test functions, source code functions, and assert statements.\n\nThe class is initialized with the root directory of the project, the directories containing the test and source code, and the name of the output CSV file. It uses Python's `sys.settrace` function to trace function calls, returns, and exceptions.\n\nDuring the tracing process, it collects data such as the depth of the call stack, the type of function (test function, source function, or assert statement), the name and fully qualified name of the function, the class name (if applicable), the line number, the event type (call, return, or exception), the return value and type, and the exception type and message (if an exception occurred).\n\nThis data is stored in a list of dictionaries, with each dictionary representing a row of data. After the pytest session finishes, the [`write_to_csv`](command:_github.copilot.openSymbolInFile?%5B%22pytest_tracer.py%22%2C%22write_to_csv%22%5D \"pytest_tracer.py\") method is called to write this data to a CSV file.\n\nThis class can be useful for understanding the flow of execution in your tests, identifying slow or frequently called functions, and debugging issues.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different event types that the PytestTracer class logs during the tracing process?",
          "title": "What are the different event types that the PytestTracer class logs during the tracing process?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
            "scheme": "file"
          },
          "kind": "reference"
        },
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/conftest.py",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/conftest.py",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/conftest.py",
            "scheme": "file"
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace What is the purpose of the SSL.py file in src/OenSSL/SSL.py",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 70
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 71
            },
            "text": " What is the purpose of the SSL.py file in src/OenSSL/SSL.py",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What is the purpose of the SSL.py file in src/OenSSL/SSL.py"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The `SSL.py` file in [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") is part of the pyOpenSSL library, which is a Python wrapper for the OpenSSL library. This file specifically provides a high-level interface to the SSL (Secure Sockets Layer) and TLS (Transport Layer Security) protocols of OpenSSL.\n\nHere are some of the functionalities provided by this file:\n\n- It defines constants for SSL/TLS methods like `SSLv23_METHOD`, `TLSv1_METHOD`, etc.\n- It defines error codes related to SSL operations.\n- It provides the `Context` class, which represents an SSL context for configuring TLS/SSL sessions.\n- It provides the `Connection` class, which represents network connections that are secured using SSL/TLS.\n- It provides the `Session` class, which represents SSL/TLS sessions for connection reuse.\n\nThe classes in this file allow you to create and manage SSL/TLS connections, configure SSL contexts, handle SSL-related errors, and more. The unit tests in [`tests/test_ssl.py`](command:_github.copilot.openRelativePath?%5B%22tests%2Ftest_ssl.py%22%5D \"tests/test_ssl.py\") are designed to test the functionalities provided by this file.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different versions of the SSL/TLS protocols supported by pyOpenSSL?",
          "title": "What are the different versions of the SSL/TLS protocols supported by pyOpenSSL?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/doc/ChangeLog_old.txt",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/doc/ChangeLog_old.txt",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/doc/ChangeLog_old.txt",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 424,
              "startColumn": 1,
              "endLineNumber": 465,
              "endColumn": 62
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/README.rst",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/README.rst",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/README.rst",
            "scheme": "file"
          },
          "kind": "reference"
        },
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/debug.py",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/debug.py",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/debug.py",
            "scheme": "file"
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 259,
              "startColumn": 1,
              "endLineNumber": 2153,
              "endColumn": 2
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace tests/test_crypto.py file, what do you think the unit test test_str of class TestX509Ext is testing?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 111
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 112
            },
            "text": " tests/test_crypto.py file, what do you think the unit test test_str of class TestX509Ext is testing?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "tests/test_crypto.py file, what do you think the unit test test_str of class TestX509Ext is testing?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The [`test_str`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_str%22%5D \"tests/test_crypto.py\") method in the [`TestX509Ext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509Ext%22%5D \"tests/test_crypto.py\") class in the [`tests/test_crypto.py`](command:_github.copilot.openRelativePath?%5B%22tests%2Ftest_crypto.py%22%5D \"tests/test_crypto.py\") file is testing the string representation of `X509Extension` instances.\n\nSpecifically, it's testing that when the `str` function is called on an `X509Extension` instance, the returned string includes the expected information. In this case, it's asserting that the string representation of an `X509Extension` instance created with [`b\"basicConstraints\"`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22b%5C%22basicConstraints%5C%22%22%5D \"tests/test_crypto.py\") as the extension type, `True` as the critical flag, and [`b\"CA:false\"`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22b%5C%22CA%3Afalse%5C%22%22%5D \"tests/test_crypto.py\") as the extension value is `\"CA:FALSE\"`.\n\nThis test ensures that the `__str__` method of the `X509Extension` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file is working as expected.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods are tested in the `TestX509Ext` class in `tests/test_crypto.py`?",
          "title": "What other methods are tested in the `TestX509Ext` class in `tests/test_crypto.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 790,
              "startColumn": 1,
              "endLineNumber": 864,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 876,
              "startColumn": 5,
              "endLineNumber": 883,
              "endColumn": 54
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 915,
              "startColumn": 5,
              "endLineNumber": 921,
              "endColumn": 67
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1216,
              "startColumn": 5,
              "endLineNumber": 1221,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1300,
              "startColumn": 5,
              "endLineNumber": 1306,
              "endColumn": 76
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace So what particular function do you think the unit test is testing? ",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 78
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 79
            },
            "text": " So what particular function do you think the unit test is testing? ",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "So what particular function do you think the unit test is testing?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The unit test [`test_str`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_str%22%5D \"tests/test_crypto.py\") in the [`TestX509Ext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509Ext%22%5D \"tests/test_crypto.py\") class in the [`tests/test_crypto.py`](command:_github.copilot.openRelativePath?%5B%22tests%2Ftest_crypto.py%22%5D \"tests/test_crypto.py\") file is testing the string representation of `X509Extension` instances from the `OpenSSL.crypto.X509Extension` class.\n\nSpecifically, it's testing that when the `str` function is called on an `X509Extension` instance, the returned string includes the expected information. In this case, it's asserting that the string representation of an `X509Extension` instance created with [`b\"basicConstraints\"`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22b%5C%22basicConstraints%5C%22%22%5D \"tests/test_crypto.py\") as the extension type, `True` as the critical flag, and [`b\"CA:false\"`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22b%5C%22CA%3Afalse%5C%22%22%5D \"tests/test_crypto.py\") as the extension value is `\"CA:FALSE\"`.\n\nThis test ensures that the `__str__` method of the `X509Extension` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file is working as expected.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods are tested in the `TestX509Ext` class in the `tests/test_crypto.py` file?",
          "title": "What other methods are tested in the `TestX509Ext` class in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 790,
              "startColumn": 1,
              "endLineNumber": 874,
              "endColumn": 50
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 876,
              "startColumn": 5,
              "endLineNumber": 883,
              "endColumn": 54
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1216,
              "startColumn": 5,
              "endLineNumber": 1221,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1300,
              "startColumn": 5,
              "endLineNumber": 1306,
              "endColumn": 76
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "For python best practices, when making a class, what kind of method should be used as private methods, and when should you instead create util functions and let the class import them instead?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 191
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 192
            },
            "text": "For python best practices, when making a class, what kind of method should be used as private methods, and when should you instead create util functions and let the class import them instead?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For python best practices, when making a class, what kind of method should be used as private methods, and when should you instead create util functions and let the class import them instead?"
      },
      "response": [
        {
          "value": "In Python, methods that are intended to be private are typically prefixed with a single underscore, like `_my_private_method(self)`. These methods are not truly private (as they would be in languages like Java), but the underscore is a convention that signals to other developers that the method is intended for internal use within the class.\n\nYou should use private methods in a class when the functionality they provide is closely tied to the state or behavior of the class. If a method operates on the class's instance variables or calls other methods of the class, it's a good candidate for a private method.\n\nOn the other hand, utility functions that are not closely tied to the state or behavior of a class should be defined outside the class. These functions are typically stateless and operate only on their inputs. They can be defined in the same module as the class or in a separate utility module, depending on how broadly they are used in your codebase.\n\nHere's an example:\n\n```python\nclass MyClass:\n    def __init__(self, value):\n        self._value = value\n\n    def public_method(self):\n        return self._private_method()\n\n    def _private_method(self):\n        return self._value * 2\n\ndef utility_function(value):\n    return value * 2\n```\n\nIn this example, `_private_method` is a private method because it operates on the `_value` instance variable of `MyClass`. `utility_function`, on the other hand, is a utility function because it operates only on its input and has no dependencies on any class.",
          "isTrusted": false,
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some common design patterns used in Python?",
          "title": "What are some common design patterns used in Python?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "copilot",
        "metadata": {
          "description": "",
          "fullName": "GitHub Copilot",
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isDefault": true,
          "helpTextPrefix": "You can ask me general programming questions, or chat with the following agents which have specialized expertise and can perform actions:",
          "helpTextPostfix": {
            "value": "To have a great conversation, ask me questions as if I was a real programmer:\n\n* **Show me the code** you want to talk about by having the files open and selecting the most important lines.\n* **Make refinements** by asking me follow-up questions, adding clarifications, providing errors, etc.\n* **Review my suggested code** and tell me about issues or improvements, so I can iterate on it.\n\nYou can also ask me questions about your editor selection by [starting an inline chat session](command:inlineChat.start).\n\nLearn more about [GitHub Copilot](https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode) in [Visual Studio Code](https://code.visualstudio.com/docs/editor/artificial-intelligence).",
            "isTrusted": {
              "enabledCommands": [
                "inlineChat.start"
              ]
            },
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "command:inlineChat.start": {
                "$mid": 1,
                "path": "inlineChat.start",
                "scheme": "command"
              },
              "https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode": {
                "$mid": 1,
                "path": "/copilot/getting-started-with-github-copilot",
                "scheme": "https",
                "authority": "docs.github.com",
                "query": "tool=vscode"
              },
              "https://code.visualstudio.com/docs/editor/artificial-intelligence": {
                "$mid": 1,
                "path": "/docs/editor/artificial-intelligence",
                "scheme": "https",
                "authority": "code.visualstudio.com"
              }
            }
          },
          "supportIssueReporting": false
        }
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace in the test_pregeneration unit tests of the TestPKey class in tests.test_crypto.py, what is it for?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 110
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 111
            },
            "text": " in the test_pregeneration unit tests of the TestPKey class in tests.test_crypto.py, what is it for?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "in the test_pregeneration unit tests of the TestPKey class in tests.test_crypto.py, what is it for?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") unit test in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class in the [`tests/test_crypto.py`](command:_github.copilot.openRelativePath?%5B%22tests%2Ftest_crypto.py%22%5D \"tests/test_crypto.py\") file is testing the initial state of a `PKey` object before it has been generated.\n\nSpecifically, it's testing that:\n\n- The [`type()`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type()%22%5D \"tests/test_crypto.py\") method of a `PKey` object returns `0` before the key is generated.\n- The [`bits()`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits()%22%5D \"tests/test_crypto.py\") method of a `PKey` object returns `0` before the key is generated.\n- The `check()` method of a `PKey` object raises a `TypeError` before the key is generated.\n\nThis test ensures that the `PKey` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file correctly initializes its state and that its methods behave as expected when called before the key is generated.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the other unit tests in the `TestPKey` class of `tests/test_crypto.py` file?",
          "title": "What are the other unit tests in the `TestPKey` class of `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1046,
              "startColumn": 5,
              "endLineNumber": 1054,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1062,
              "startColumn": 5,
              "endLineNumber": 1067,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1119,
              "startColumn": 45,
              "endLineNumber": 1119,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1121,
              "startColumn": 5,
              "endLineNumber": 1131,
              "endColumn": 27
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1133,
              "startColumn": 5,
              "endLineNumber": 1147,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1149,
              "startColumn": 5,
              "endLineNumber": 1158,
              "endColumn": 38
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace What do you think the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration is for?",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 116
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 117
            },
            "text": " What do you think the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration is for?",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What do you think the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration is for?"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "The unit test [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class in the [`tests/test_crypto.py`](command:_github.copilot.openRelativePath?%5B%22tests%2Ftest_crypto.py%22%5D \"tests/test_crypto.py\") file is testing the initial state of a `PKey` object before it has been generated.\n\nSpecifically, it's testing that:\n\n- The [`type()`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type()%22%5D \"tests/test_crypto.py\") method of a `PKey` object returns `0` before the key is generated.\n- The [`bits()`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits()%22%5D \"tests/test_crypto.py\") method of a `PKey` object returns `0` before the key is generated.\n- The `check()` method of a `PKey` object raises a `TypeError` before the key is generated.\n\nThis test ensures that the `PKey` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file correctly initializes its state and that its methods behave as expected when called before the key is generated.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the other unit tests in the `TestPKey` class of `tests/test_crypto.py` file?",
          "title": "What are the other unit tests in the `TestPKey` class of `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1046,
              "startColumn": 5,
              "endLineNumber": 1054,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1119,
              "startColumn": 45,
              "endLineNumber": 1119,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1121,
              "startColumn": 5,
              "endLineNumber": 1131,
              "endColumn": 27
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1133,
              "startColumn": 5,
              "endLineNumber": 1147,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1149,
              "startColumn": 5,
              "endLineNumber": 1158,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1190,
              "startColumn": 8,
              "endLineNumber": 1191,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace  For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test?\n\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 651
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 10,
              "endColumn": 2
            },
            "text": "  For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test?\n\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test?\n\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the `PKey` class before a key has been generated. This includes the initialization of a `PKey` instance and the behavior of the [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods on a `PKey` instance before a key has been generated.\n\nHere is the JSON object representing the functions that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ]\n}\n```\n\nThis means that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is testing the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22__init__%22%5D \"tests/test_crypto.py\"), [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods of the `PKey` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some other unit tests in the `tests/test_crypto.py` file that involve the `PKey` class?",
          "title": "What are some other unit tests in the `tests/test_crypto.py` file that involve the `PKey` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1026,
              "startColumn": 5,
              "endLineNumber": 1036,
              "endColumn": 41
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1046,
              "startColumn": 5,
              "endLineNumber": 1054,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1119,
              "startColumn": 45,
              "endLineNumber": 1119,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1121,
              "startColumn": 5,
              "endLineNumber": 1131,
              "endColumn": 27
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1149,
              "startColumn": 5,
              "endLineNumber": 1158,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1468,
              "startColumn": 5,
              "endLineNumber": 1472,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2703,
              "startColumn": 5,
              "endLineNumber": 2713,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2780,
              "startColumn": 5,
              "endLineNumber": 2788,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 692
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 3,
              "endColumn": 186
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the `PKey` class before a key has been generated. This includes the initialization of a `PKey` instance and the behavior of the [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods on a `PKey` instance before a key has been generated.\n\nHere is the JSON object representing the functions that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ]\n}\n```\n\nThis means that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is testing the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22__init__%22%5D \"tests/test_crypto.py\"), [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods of the `PKey` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why each function is being tested:\n\n- `src.OpenSSL.crypto.PKey.__init__`: This is the constructor of the `PKey` class. The test is creating an instance of `PKey`, so it's testing that the instance can be created successfully and that it's initialized in the expected state.\n- `src.OpenSSL.crypto.PKey.type`: This method returns the type of the key. The test is checking that the type is `0` before the key is generated, so it's testing that the [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\") method correctly returns the key type in this state.\n- `src.OpenSSL.crypto.PKey.bits`: This method returns the number of bits in the key. The test is checking that the number of bits is `0` before the key is generated, so it's testing that the [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\") method correctly returns the number of bits in this state.\n- `src.OpenSSL.crypto.PKey.check`: This method checks the consistency of an RSA private key. The test is checking that this method raises a `TypeError` before the key is generated, so it's testing that the `check` method correctly raises an error in this state.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the other unit tests in the `TestPKey` class in `tests/test_crypto.py` file?",
          "title": "What are the other unit tests in the `TestPKey` class in `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1026,
              "startColumn": 5,
              "endLineNumber": 1036,
              "endColumn": 41
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1046,
              "startColumn": 5,
              "endLineNumber": 1054,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1062,
              "startColumn": 5,
              "endLineNumber": 1067,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1119,
              "startColumn": 45,
              "endLineNumber": 1119,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1149,
              "startColumn": 5,
              "endLineNumber": 1158,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2703,
              "startColumn": 5,
              "endLineNumber": 2713,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1922
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 31,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that the unit test calls is listed in the below JSON object. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_get_peer_cert_chain_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_peer_cert_chain_none%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the `Connection.get_peer_cert_chain` method when the peer sends no certificate chain. \n\nHere is the JSON object representing the functions that the [`test_get_peer_cert_chain_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_peer_cert_chain_none%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.load_certificate\"\n    ]\n}\n```\n\nHere's why each function is being tested:\n\n- `src.OpenSSL.SSL.Connection.__init__`: This is the constructor of the `Connection` class. The test is creating an instance of `Connection`, so it's testing that the instance can be created successfully and that it's initialized in the expected state.\n- `src.OpenSSL.SSL.Connection.set_accept_state` and `src.OpenSSL.SSL.Connection.set_connect_state`: These methods set the connection to work in server or client mode, respectively. The test is setting these states, so it's testing that these methods work as expected.\n- `src.OpenSSL.SSL.Connection.get_peer_cert_chain`: This is the main method being tested. It's supposed to return `None` if the peer sends no certificate chain, and the test is checking this behavior.\n- `src.OpenSSL.SSL.Context.__init__`: This is the constructor of the `Context` class. The test is creating an instance of `Context`, so it's testing that the instance can be created successfully and that it's initialized in the expected state.\n- `src.OpenSSL.SSL.Context.use_privatekey` and `src.OpenSSL.SSL.Context.use_certificate`: These methods are used to set the private key and certificate to be used by the `Context`. The test is setting these, so it's testing that these methods work as expected.\n- `src.OpenSSL.crypto.load_privatekey` and `src.OpenSSL.crypto.load_certificate`: These functions are used to load a private key and a certificate from a string, respectively. The test is loading these, so it's testing that these functions work as expected.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `Connection` class in `OpenSSL.SSL` module are tested in the `TestConnection` class in `tests/test_ssl.py`?",
          "title": "What other methods of the `Connection` class in `OpenSSL.SSL` module are tested in the `TestConnection` class in `tests/test_ssl.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2556,
              "startColumn": 5,
              "endLineNumber": 2565,
              "endColumn": 28
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2567,
              "startColumn": 5,
              "endLineNumber": 2595,
              "endColumn": 68
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2597,
              "startColumn": 5,
              "endLineNumber": 2610,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2612,
              "startColumn": 5,
              "endLineNumber": 2643,
              "endColumn": 68
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2645,
              "startColumn": 5,
              "endLineNumber": 2658,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2660,
              "startColumn": 5,
              "endLineNumber": 2667,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2882,
              "startColumn": 5,
              "endLineNumber": 2889,
              "endColumn": 54
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "What do you think the following JSON object represents?\n\n{\n    \"tests.test_crypto.TestX509Ext.test_str\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_type\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_construction\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_extension\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_critical\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_short_name\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_data\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_subject\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_subject\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_issuer\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_issuer\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_roundtrip_cryptography_private_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_public_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.bits\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_public_pkey_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestPKey.test_type\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_construction\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n    \"tests.test_crypto.TestPKey.test_failed_generation\": [\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_rsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_dsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_regeneration\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_inconsistent_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_invalid_attribute\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_attributes\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_copy\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Name.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_repr\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.__repr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_comparison\": [\n        \"src.OpenSSL.crypto.X509Name.__lt__\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_hash\": [\n        \"src.OpenSSL.crypto.X509Name.hash\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_der\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.der\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_get_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_attribute\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_attribute_failure\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_ungenerated\": [\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_unknown_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.verify\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_type\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.get_version\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Req.get_subject\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_uninitialized_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_success\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL.crypto.X509Req.to_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509.test_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_construction\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_serial_number\": [\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notAfter\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired_exception\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_root_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_extension_count\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.get_extension_count\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_extension\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_nullbyte_subjectAltName\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Extension._subjectAltNameString\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_pubkey_uninitialized\": [\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_pubkey_wrong_type\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_subject_name_hash\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.subject_name_hash\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_undefined_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_sign_bad_pubkey_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_type\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_accepts_duplicate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_parameters\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_raises_error_on_failure\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type\": [\n        \"src.OpenSSL.crypto.PKCS12.__init__\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_empty_construction\": [\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type_errors\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_cert_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_replace\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_friendly_name\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_various_empty_passphrases\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_removing_ca_cert\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_load_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_zero_len_list_for_ca\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_cert_mismatch\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_loading_works\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_type\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_key_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_tolerates_unicode_strings\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseWrongType\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_not_rsa_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_pkey\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_unknown_cipher\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_callback_length\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_wrong_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_bad_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_text\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_invalid_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_request\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_callback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphraseCallbackLength\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_file_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_type\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_construction\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_invalid_attribute\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_b64_encode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.b64_encode\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_get_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_set_new_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_construction\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_serial\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_date\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\",\n        \"src.OpenSSL.crypto._get_asn1_time\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_wrong_args\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_construction\": [\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_pem\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_der\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_text\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_custom_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_default_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_invalid\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_add_revoked_keyword\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_wrong_args\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_digest\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_revoked\": [\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_filetype\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_issuer\": [\n        \"src.OpenSSL.crypto.CRL.get_issuer\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_revoked\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_missing_crl\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.to_cryptography\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_success_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid_untrusted_chain_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_chain_reference\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_fail_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_chain_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_failure_building_untrusted_chain_raises\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_trusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_intermediate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_modification_pre_verify\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.set_store\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_time\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL.crypto.X509Store.set_time\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_path_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_cafile_and_capath\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_multiple_ca_files\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_failure_with_empty_ca_directory\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_partial_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_with_text\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_ecdsa\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_nulls\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_set\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_not_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_repr\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__repr__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_to_EC_KEY\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegatedEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegateNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_contains\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_does_not_contain\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_rand.TestRand.test_add_wrong_args\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_add\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_status\": [\n        \"src.OpenSSL.rand.status\"\n    ],\n    \"tests.test_ssl.TestVersion.test_SSLeay_version\": [\n        \"src.OpenSSL.SSL.OpenSSL_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_wrong_type\": [\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_no_cipher_match\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_fail\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_method\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_missing\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_wrong_privatekey_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_missing\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_bytes\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_unicode\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_valid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_app_data\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_app_data\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_timeout\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.get_timeout\",\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_depth_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_depth\": [\n        \"src.OpenSSL.SSL.Context.set_verify_depth\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_exception\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_false\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_non_string\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_too_long\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_info_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_info_callback\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Context.set_info_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_proto_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_bytes_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_unicode_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_invalid_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_directory_capath\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_locations_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_default_verify_paths\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_env_vars\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert_invalid_cert\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_connection_argument\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_x509_in_verify_works\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_default_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_bytes\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_unicode\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_mode\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_mode_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tmp_ecdh\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_tmp_ecdh\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_cache_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_session_cache_mode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_get_cert_store\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_not_bytes\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_invalid_profile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_valid\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_old_callback_forgotten\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_success\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_call_failure\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_set_on_connection\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_server_fail\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server_overlap\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_select_cb_returns_invalid_value\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.SSL.Context.use_certificate\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_uninitialized\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestConnection.test_type\": [\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_tlsext_host_name_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_pending\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.pending\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_refused\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_ex\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect_ex\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_accept\": [\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.accept\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_truncated\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_shutdown\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_state_string\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_state_string\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_app_data\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_app_data\"\n    ],\n    \"tests.test_ssl.TestConnection.test_makefile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.makefile\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate_none\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_session_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_server_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_set_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_method\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantWriteError\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_tls_finished_message_symmetry\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version_name\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantReadError\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_read_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_buffer_size\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionGetCipherList.test_result\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytearray\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_buf_too_large\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_long\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_total_renegotiations\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_renegotiate\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.renegotiate_pending\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.renegotiate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_memory_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.client_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection.server_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.export_keying_material\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_outgoing_overflow\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_unexpected_EOF\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_client_ca_list_errors\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_empty_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_one_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_multiple_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_reset_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_mutated_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_add_client_ca_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_one_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_multiple_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_and_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_after_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestRequires.test_available\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestRequires.test_unavailable\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator.<locals>.explode\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_arent_called_by_default\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_negotiates_without_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_receives_servers_data\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_are_invoked_with_connections\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_opaque_data_is_passed_through\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_returns_empty_string\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_returns_false_terminates_handshake\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_client_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_server_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_must_return_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_at_all\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_with_srtp\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 321480
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 6406,
              "endColumn": 2
            },
            "text": "What do you think the following JSON object represents?\n\n{\n    \"tests.test_crypto.TestX509Ext.test_str\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_type\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_construction\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_extension\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_critical\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_short_name\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_data\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_subject\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_subject\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_issuer\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_issuer\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_roundtrip_cryptography_private_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_public_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.bits\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_public_pkey_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestPKey.test_type\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_construction\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n    \"tests.test_crypto.TestPKey.test_failed_generation\": [\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_rsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_dsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_regeneration\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_inconsistent_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_invalid_attribute\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_attributes\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_copy\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Name.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_repr\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.__repr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_comparison\": [\n        \"src.OpenSSL.crypto.X509Name.__lt__\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_hash\": [\n        \"src.OpenSSL.crypto.X509Name.hash\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_der\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.der\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_get_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_attribute\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_attribute_failure\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_ungenerated\": [\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_unknown_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.verify\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_type\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.get_version\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Req.get_subject\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_uninitialized_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_success\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL.crypto.X509Req.to_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509.test_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_construction\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_serial_number\": [\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notAfter\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired_exception\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_root_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_extension_count\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.get_extension_count\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_extension\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_nullbyte_subjectAltName\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Extension._subjectAltNameString\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_pubkey_uninitialized\": [\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_pubkey_wrong_type\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_subject_name_hash\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.subject_name_hash\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_undefined_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_sign_bad_pubkey_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_type\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_accepts_duplicate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_parameters\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_raises_error_on_failure\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type\": [\n        \"src.OpenSSL.crypto.PKCS12.__init__\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_empty_construction\": [\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type_errors\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_cert_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_replace\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_friendly_name\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_various_empty_passphrases\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_removing_ca_cert\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_load_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_zero_len_list_for_ca\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_cert_mismatch\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_loading_works\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_type\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_key_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_tolerates_unicode_strings\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseWrongType\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_not_rsa_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_pkey\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_unknown_cipher\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_callback_length\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_wrong_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_bad_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_text\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_invalid_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_request\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_callback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphraseCallbackLength\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_file_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_type\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_construction\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_invalid_attribute\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_b64_encode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.b64_encode\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_get_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_set_new_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_construction\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_serial\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_date\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\",\n        \"src.OpenSSL.crypto._get_asn1_time\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_wrong_args\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_construction\": [\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_pem\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_der\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_text\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_custom_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_default_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_invalid\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_add_revoked_keyword\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_wrong_args\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_digest\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_revoked\": [\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_filetype\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_issuer\": [\n        \"src.OpenSSL.crypto.CRL.get_issuer\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_revoked\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_missing_crl\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.to_cryptography\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_success_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid_untrusted_chain_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_chain_reference\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_fail_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_chain_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_failure_building_untrusted_chain_raises\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_trusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_intermediate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_modification_pre_verify\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.set_store\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_time\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL.crypto.X509Store.set_time\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_path_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_cafile_and_capath\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_multiple_ca_files\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_failure_with_empty_ca_directory\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_partial_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_with_text\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_ecdsa\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_nulls\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_set\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_not_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_repr\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__repr__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_to_EC_KEY\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegatedEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegateNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_contains\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_does_not_contain\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_rand.TestRand.test_add_wrong_args\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_add\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_status\": [\n        \"src.OpenSSL.rand.status\"\n    ],\n    \"tests.test_ssl.TestVersion.test_SSLeay_version\": [\n        \"src.OpenSSL.SSL.OpenSSL_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_wrong_type\": [\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_no_cipher_match\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_fail\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_method\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_missing\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_wrong_privatekey_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_missing\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_bytes\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_unicode\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_valid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_app_data\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_app_data\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_timeout\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.get_timeout\",\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_depth_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_depth\": [\n        \"src.OpenSSL.SSL.Context.set_verify_depth\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_exception\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_false\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_non_string\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_too_long\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_info_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_info_callback\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Context.set_info_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_proto_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_bytes_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_unicode_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_invalid_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_directory_capath\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_locations_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_default_verify_paths\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_env_vars\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert_invalid_cert\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_connection_argument\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_x509_in_verify_works\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_default_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_bytes\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_unicode\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_mode\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_mode_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tmp_ecdh\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_tmp_ecdh\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_cache_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_session_cache_mode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_get_cert_store\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_not_bytes\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_invalid_profile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_valid\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_old_callback_forgotten\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_success\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_call_failure\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_set_on_connection\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_server_fail\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server_overlap\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_select_cb_returns_invalid_value\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.SSL.Context.use_certificate\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_uninitialized\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestConnection.test_type\": [\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_tlsext_host_name_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_pending\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.pending\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_refused\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_ex\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect_ex\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_accept\": [\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.accept\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_truncated\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_shutdown\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_state_string\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_state_string\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_app_data\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_app_data\"\n    ],\n    \"tests.test_ssl.TestConnection.test_makefile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.makefile\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate_none\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_session_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_server_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_set_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_method\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantWriteError\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_tls_finished_message_symmetry\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version_name\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantReadError\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_read_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_buffer_size\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionGetCipherList.test_result\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytearray\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_buf_too_large\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_long\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_total_renegotiations\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_renegotiate\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.renegotiate_pending\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.renegotiate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_memory_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.client_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection.server_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.export_keying_material\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_outgoing_overflow\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_unexpected_EOF\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_client_ca_list_errors\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_empty_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_one_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_multiple_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_reset_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_mutated_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_add_client_ca_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_one_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_multiple_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_and_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_after_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestRequires.test_available\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestRequires.test_unavailable\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator.<locals>.explode\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_arent_called_by_default\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_negotiates_without_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_receives_servers_data\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_are_invoked_with_connections\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_opaque_data_is_passed_through\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_returns_empty_string\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_returns_false_terminates_handshake\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_client_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_server_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_must_return_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_at_all\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_with_srtp\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "What do you think the following JSON object represents?\n\n{\n    \"tests.test_crypto.TestX509Ext.test_str\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_type\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_construction\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_extension\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_critical\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_short_name\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_get_data\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_subject\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_subject\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_unused_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_missing_issuer\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Ext.test_invalid_issuer\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_roundtrip_cryptography_private_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_public_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.bits\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.PKey.from_cryptography_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_convert_public_pkey_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestPKey.test_type\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_construction\": [\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ],\n    \"tests.test_crypto.TestPKey.test_failed_generation\": [\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.PKey.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_rsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_dsa_generation\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_regeneration\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestPKey.test_inconsistent_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_invalid_attribute\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_attributes\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_copy\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Name.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_repr\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.__repr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_comparison\": [\n        \"src.OpenSSL.crypto.X509Name.__lt__\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_hash\": [\n        \"src.OpenSSL.crypto.X509Name.hash\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_der\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.der\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_get_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_attribute\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_load_nul_byte_components\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Name.test_set_attribute_failure\": [\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_ungenerated\": [\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_public_key\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign_with_unknown_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto._PKeyInteractionTestsMixin.test_sign\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.get_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.verify\",\n        \"src.OpenSSL.crypto.X509Req.get_pubkey\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_type\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.get_version\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Req.get_subject\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_get_extensions\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto.X509Req.get_extensions.<locals>.<lambda>\",\n        \"src.OpenSSL.crypto.X509Extension.get_data\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_add_extensions_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.add_extensions\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_uninitialized_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_verify_success\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Req.verify\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509Req.__init__\",\n        \"src.OpenSSL.crypto.X509Req.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509Req.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL.crypto.X509Req.to_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestX509.test_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_construction\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_version_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_serial_number\": [\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_notAfter\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notBefore\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notBefore\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter_wrong_args\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_gmtime_adj_notAfter\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.gmtime_adj_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_has_expired_exception\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_root_has_not_expired\": [\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.has_expired\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_digest\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_extension_count\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.get_extension_count\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_extension\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.X509Extension.get_critical\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestX509.test_nullbyte_subjectAltName\": [\n        \"src.OpenSSL.crypto.X509Extension.__str__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Extension._subjectAltNameString\",\n        \"src.OpenSSL.crypto.X509.get_extension\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Extension._nid\"\n    ],\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_subject\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.set_subject\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_issuer\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509Name.get_components\",\n        \"src.OpenSSL.crypto.X509.get_issuer\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_pubkey_uninitialized\": [\n        \"src.OpenSSL.crypto.X509.get_pubkey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509.test_set_pubkey_wrong_type\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_subject_name_hash\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.subject_name_hash\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_get_undefined_signature_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_signature_algorithm\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_sign_bad_pubkey_type\": [\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_type\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_add_cert_accepts_duplicate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_parameters\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509Store.test_load_locations_raises_error_on_failure\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type\": [\n        \"src.OpenSSL.crypto.PKCS12.__init__\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_empty_construction\": [\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_type_errors\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_cert_only\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.get_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_certificate\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_replace\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_friendly_name\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKCS12.set_friendlyname\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.PKCS12.get_friendlyname\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_various_empty_passphrases\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_removing_ca_cert\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_load_without_mac\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_zero_len_list_for_ca\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.get_ca_certificates\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_export_without_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\"\n    ],\n    \"tests.test_crypto.TestPKCS12.test_key_cert_mismatch\": [\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.export\",\n        \"src.OpenSSL.crypto.PKCS12.set_ca_certificates\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.PKCS12.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto.PKCS12.set_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.PKCS12.set_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_loading_works\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_type\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_invalid_key_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadPublicKey.test_tolerates_unicode_strings\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_format\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseWrongType\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphraseCallback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_not_rsa_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_pkey\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_unknown_cipher\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_passphrase_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_invalid_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_callback_length\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_wrong_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_bad_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_text\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_pem\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_asn1\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_publickey_invalid_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_publickey\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_publickey\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_certificate_request\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.dump_certificate_request\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_callback\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphrase_exception\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_passphraseCallbackLength\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_dump_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestFunction.test_load_privatekey_truncated\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_file_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_certificate_request\"\n    ],\n    \"tests.test_crypto.TestLoadCertificate.test_bad_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_type\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_construction\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_invalid_attribute\": [\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\"\n    ],\n    \"tests.test_crypto.TestNetscapeSPKI.test_b64_encode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.sign\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.__init__\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.b64_encode\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.NetscapeSPKI.set_pubkey\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_get_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_ignores_unsupported_revoked_cert_extension_set_new_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_construction\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_serial\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_date\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\",\n        \"src.OpenSSL.crypto._get_asn1_time\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_wrong_args\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_construction\": [\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_pem\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_der\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_text\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_custom_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_default_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_invalid\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_add_revoked_keyword\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_wrong_args\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_filetype\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_export_unknown_digest\": [\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_revoked\": [\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.Revoked.get_rev_date\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.get_revoked\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.Revoked.get_serial\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_filetype\": [\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\"\n    ],\n    \"tests.test_crypto.TestCRL.test_load_crl_bad_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestCRL.test_get_issuer\": [\n        \"src.OpenSSL.crypto.CRL.get_issuer\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_revoked\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\"\n    ],\n    \"tests.test_crypto.TestCRL.test_verify_with_missing_crl\": [\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_crl\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto.CRL.sign\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.to_cryptography_key\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.CRL.set_version\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.CRL.set_nextUpdate\",\n        \"src.OpenSSL.crypto.CRL.set_lastUpdate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_serial_number\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.CRL.from_cryptography\"\n    ],\n    \"tests.test_crypto.TestCRL.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.CRL.to_cryptography\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_success_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_valid_untrusted_chain_reuse\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_chain_reference\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_fail_with_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_chain_wrong_args\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_failure_building_untrusted_chain_raises\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack.<locals>.cleanup\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_trusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_untrusted_self_signed\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_invalid_chain_no_intermediate\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_modification_pre_verify\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.set_store\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_time\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL.crypto.X509Store.set_time\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509.get_notAfter\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_path_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_cafile_and_capath\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_multiple_ca_files\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_failure_with_empty_ca_directory\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_partial_chain\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.set_flags\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_with_text\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_verify_ecdsa\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_nulls\": [\n        \"src.OpenSSL.crypto.verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_set\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_not_a_curve\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_repr\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__repr__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\"\n    ],\n    \"tests.test_crypto.TestEllipticCurve.test_to_EC_KEY\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_identicalNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_sameNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_differentNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_anotherTypeNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegatedEq\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.util.EqualityTestsMixin.test_delegateNe\": [\n        \"src.OpenSSL.crypto._EllipticCurve.__ne__\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_contains\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_crypto.TestEllipticCurveHash.test_does_not_contain\": [\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto.get_elliptic_curve\"\n    ],\n    \"tests.test_rand.TestRand.test_add_wrong_args\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_add\": [\n        \"src.OpenSSL.rand.add\"\n    ],\n    \"tests.test_rand.TestRand.test_status\": [\n        \"src.OpenSSL.rand.status\"\n    ],\n    \"tests.test_ssl.TestVersion.test_SSLeay_version\": [\n        \"src.OpenSSL.SSL.OpenSSL_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_wrong_type\": [\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_cipher_list_no_cipher_match\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_cipher_list\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_client_ca_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.load_client_ca\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_fail\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ],\n    \"tests.test_ssl.TestContext.test_method\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_missing\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_wrong_privatekey_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_privatekey_file_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_missing\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_bytes\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_file_unicode\": [\n        \"src.OpenSSL.SSL.Context.use_certificate_file\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_valid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_privatekey_invalid\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContext.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_app_data\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_app_data\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_mode\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_timeout\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.get_timeout\",\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_depth_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_depth\": [\n        \"src.OpenSSL.SSL.Context.set_verify_depth\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_depth\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_passwd_cb\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_exception\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_false\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_non_string\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_passwd_callback_too_long\": [\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.SSL.Context._wrap_callback\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_privatekey_file\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_passwd_cb\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL.Context._wrap_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_info_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_info_callback\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Context.set_info_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_proto_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_bytes_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_unicode_cafile\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_invalid_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_directory_capath\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_peer_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_verify_locations_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_default_verify_paths\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_check_env_vars\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ],\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert_invalid_cert\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_connection_argument\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_x509_in_verify_works\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_default_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContext.test_add_extra_chain_cert\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.crypto.dump_privatekey\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_bytes\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_unicode\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_use_certificate_chain_file_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.use_certificate_chain_file\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_mode\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_mode_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_missing_file\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_bytes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_load_tmp_dh_unicode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.load_tmp_dh\",\n        \"src.OpenSSL._util.path_bytes\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tmp_ecdh\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_tmp_ecdh\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._EllipticCurve._to_EC_KEY\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.get_elliptic_curves\",\n        \"src.OpenSSL.crypto._EllipticCurve._get_elliptic_curves\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_session_cache_mode_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_session_cache_mode\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_session_cache_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_session_cache_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_get_cert_store\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_not_bytes\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_invalid_profile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestContext.test_set_tlsext_use_srtp_valid\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_old_callback_forgotten\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestServerNameCallback.test_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_success\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_call_failure\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_set_on_connection\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_alpn_protos\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_server_fail\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server_overlap\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_select_cb_returns_invalid_value\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_no_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL.Connection.get_alpn_proto_negotiated\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestApplicationLayerProtoNegotiation.test_alpn_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos.<locals>.<genexpr>\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL._ALPNSelectHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_alpn_select_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_alpn_protos\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_privatekey_wrong_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context._raise_passphrase_exception\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.SSL.Context.use_certificate\"\n    ],\n    \"tests.test_ssl.TestContextConnection.test_use_certificate_uninitialized\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ],\n    \"tests.test_ssl.TestConnection.test_type\": [\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_write\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_tlsext_host_name_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_pending\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.pending\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_refused\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_connect_ex\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect_ex\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_accept\": [\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.accept\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_shutdown_truncated\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_shutdown\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_shutdown\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.get_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_state_string\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_state_string\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_app_data\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_app_data\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_app_data\"\n    ],\n    \"tests.test_ssl.TestConnection.test_makefile\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.makefile\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_certificate_none\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_certificate\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain\": [\n        \"src.OpenSSL.crypto.X509.set_pubkey\",\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto.X509.sign\",\n        \"src.OpenSSL.crypto.X509.set_notAfter\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.clear\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.set_serial_number\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection._cert_stack_to_list\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509._set_name\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.add_extra_chain_cert\",\n        \"src.OpenSSL.crypto.X509.set_issuer\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto.X509.add_extensions\",\n        \"src.OpenSSL.crypto.PKey.generate_key\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_verified_chain_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_verified_chain\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_verify_callback_reference\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_session_unconnected\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_server_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_get_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_client_set_session\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_set_session_wrong_method\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.set_session\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_session\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantWriteError\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished_before_connect\": [\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_peer_finished\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_tls_finished_message_symmetry\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.get_finished\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection._get_finished_message\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Connection.get_peer_finished\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_name\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits_before_connect\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_cipher_bits\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_bits\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version_name\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version_name\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_get_protocol_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.get_protocol_version\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnection.test_wantReadError\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\"\n    ],\n    \"tests.test_ssl.TestConnection.test_bio_read_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnection.test_buffer_size\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionGetCipherList.test_result\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_list\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_short_bytearray\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSend.test_buf_too_large\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_bytearray_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_peek\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_no_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_respects_length\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRecvInto.test_memoryview_really_doesnt_overfill\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.recv_into\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_text\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_short_memoryview\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_long\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionSendall.test_closed\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Connection.sendall\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_total_renegotiations\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestConnectionRenegotiate.test_renegotiate\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.renegotiate_pending\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Connection.total_renegotiations\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.renegotiate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_memory_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.client_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.SSL.Connection.server_random\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.export_keying_material\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.master_key\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_connect\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_outgoing_overflow\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_shutdown\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_unexpected_EOF\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.sock_shutdown\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_client_ca_list_errors\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_empty_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_one_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_multiple_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_reset_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_mutated_ca_list\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_add_client_ca_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_one_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_multiple_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_and_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestMemoryBIO.test_set_after_add_client_ca\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.crypto.X509Name.__eq__\",\n        \"src.OpenSSL.SSL.Context.add_client_ca\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_client_ca_list\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.get_cert_store\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.SSL.Connection.get_client_ca_list\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.SSL.Context.check_privatekey\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.X509.get_subject\"\n    ],\n    \"tests.test_ssl.TestRequires.test_available\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestRequires.test_unavailable\": [\n        \"src.OpenSSL.SSL._make_requires\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator.<locals>.explode\",\n        \"src.OpenSSL.SSL._make_requires.<locals>._requires_decorator\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_arent_called_by_default\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_negotiates_without_server\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_receives_servers_data\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_callbacks_are_invoked_with_connections\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_opaque_data_is_passed_through\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_returns_empty_string\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_client_returns_false_terminates_handshake\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_client_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_exceptions_in_server_bubble_up\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestOCSP.test_server_must_return_bytes\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.request_ocsp\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._OCSPClientCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context._set_ocsp_callback\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_server_callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL._OCSPServerCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.SSL.Context.set_ocsp_client_callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_at_all\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_it_works_with_srtp\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.set_ciphertext_mtu\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection.get_selected_srtp_profile\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_listen\",\n        \"src.OpenSSL.SSL.Context.set_cookie_verify_callback\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cleartext_mtu\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.SSL._CookieGenerateCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL._CookieVerifyCallbackHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_use_srtp\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_options\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.SSL.Context.set_cookie_generate_callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ],\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ],\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [],
      "responseErrorDetails": {
        "message": "Sorry, this message is too long. Please try a shorter question.",
        "responseIsIncomplete": true
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "id": "copilot",
        "metadata": {
          "description": "",
          "fullName": "GitHub Copilot",
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isDefault": true,
          "helpTextPrefix": "You can ask me general programming questions, or chat with the following agents which have specialized expertise and can perform actions:",
          "helpTextPostfix": {
            "value": "To have a great conversation, ask me questions as if I was a real programmer:\n\n* **Show me the code** you want to talk about by having the files open and selecting the most important lines.\n* **Make refinements** by asking me follow-up questions, adding clarifications, providing errors, etc.\n* **Review my suggested code** and tell me about issues or improvements, so I can iterate on it.\n\nYou can also ask me questions about your editor selection by [starting an inline chat session](command:inlineChat.start).\n\nLearn more about [GitHub Copilot](https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode) in [Visual Studio Code](https://code.visualstudio.com/docs/editor/artificial-intelligence).",
            "isTrusted": {
              "enabledCommands": [
                "inlineChat.start"
              ]
            },
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "command:inlineChat.start": {
                "$mid": 1,
                "path": "inlineChat.start",
                "scheme": "command"
              },
              "https://docs.github.com/copilot/getting-started-with-github-copilot?tool=vscode": {
                "$mid": 1,
                "path": "/copilot/getting-started-with-github-copilot",
                "scheme": "https",
                "authority": "docs.github.com",
                "query": "tool=vscode"
              },
              "https://code.visualstudio.com/docs/editor/artificial-intelligence": {
                "$mid": 1,
                "path": "/docs/editor/artificial-intelligence",
                "scheme": "https",
                "authority": "code.visualstudio.com"
              }
            }
          },
          "supportIssueReporting": false
        }
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves, how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1172
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 3,
              "endColumn": 186
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves, how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves, how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the `PKey` class before a key has been generated. This includes the initialization of a `PKey` instance and the behavior of the [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods on a `PKey` instance before a key has been generated.\n\nHere is the JSON object representing the functions that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestPKey.test_pregeneration\": [\n        \"src.OpenSSL.crypto.PKey.__init__\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL.crypto.PKey.bits\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ]\n}\n```\n\nThis means that the [`test_pregeneration`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_pregeneration%22%5D \"tests/test_crypto.py\") test is testing the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22__init__%22%5D \"tests/test_crypto.py\"), [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\"), [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\"), and `check` methods of the `PKey` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why each function is being tested:\n\n- `src.OpenSSL.crypto.PKey.__init__`: This is the constructor of the `PKey` class. The test is creating an instance of `PKey`, so it's testing that the instance can be created successfully and that it's initialized in the expected state.\n- `src.OpenSSL.crypto.PKey.type`: This method returns the type of the key. The test is checking that the type is `0` before the key is generated, so it's testing that the [`type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22type%22%5D \"tests/test_crypto.py\") method correctly returns the key type in this state.\n- `src.OpenSSL.crypto.PKey.bits`: This method returns the number of bits in the key. The test is checking that the number of bits is `0` before the key is generated, so it's testing that the [`bits`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22bits%22%5D \"tests/test_crypto.py\") method correctly returns the number of bits in this state.\n- `src.OpenSSL.crypto.PKey.check`: This method checks the consistency of an RSA private key. The test is checking that this method raises a `TypeError` before the key is generated, so it's testing that the `check` method correctly raises an error in this state.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some examples of unit tests for the `PKey` class in the `OpenSSL.crypto` module?",
          "title": "What are some examples of unit tests for the `PKey` class in the `OpenSSL.crypto` module?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1149,
              "startColumn": 5,
              "endLineNumber": 1158,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1468,
              "startColumn": 5,
              "endLineNumber": 1472,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2703,
              "startColumn": 5,
              "endLineNumber": 2713,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2770,
              "startColumn": 5,
              "endLineNumber": 2778,
              "endColumn": 67
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2780,
              "startColumn": 5,
              "endLineNumber": 2788,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2911,
              "startColumn": 5,
              "endLineNumber": 2917,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1225
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 3,
              "endColumn": 186
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestPKey.test_pregeneration, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{ \"tests.test_crypto.TestPKey.test_pregeneration\": [ \"src.OpenSSL.crypto.PKey.type\", \"src.OpenSSL.crypto.PKey.bits\", \"src.OpenSSL.crypto.PKey.init\", \"src.OpenSSL.crypto.PKey.check\" ], }"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        }
      ],
      "responseErrorDetails": {
        "message": "Encountered an error while deciding what workspace information to collect: (unknown) Response contained no choices.",
        "responseIsIncomplete": true
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "contentReferences": []
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2450
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 30,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestConnection.test_get_peer_cert_chain_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_get_peer_cert_chain_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_peer_cert_chain_none%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the `get_peer_cert_chain` method of the `Connection` class when the peer sends no certificate chain.\n\nHere is the JSON object representing the functions that the [`test_get_peer_cert_chain_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_peer_cert_chain_none%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_get_peer_cert_chain_none\": [\n        \"src.OpenSSL.SSL.Connection.get_peer_cert_chain\"\n    ]\n}\n```\n\nThis means that the [`test_get_peer_cert_chain_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_peer_cert_chain_none%22%5D \"tests/test_ssl.py\") test is testing the [`get_peer_cert_chain`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22get_peer_cert_chain%22%5D \"tests/test_ssl.py\") method of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Connection.get_peer_cert_chain`: This method returns the certificate chain of the peer. The test is checking that this method returns `None` when the peer sends no certificate chain, so it's testing that the `get_peer_cert_chain` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `Connection` class in `src/OpenSSL/SSL.py` are tested in the `TestConnection` class in `tests/test_ssl.py`?",
          "title": "What other methods of the `Connection` class in `src/OpenSSL/SSL.py` are tested in the `TestConnection` class in `tests/test_ssl.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2556,
              "startColumn": 5,
              "endLineNumber": 2565,
              "endColumn": 28
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2567,
              "startColumn": 5,
              "endLineNumber": 2595,
              "endColumn": 68
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2597,
              "startColumn": 5,
              "endLineNumber": 2610,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2612,
              "startColumn": 5,
              "endLineNumber": 2643,
              "endColumn": 68
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2645,
              "startColumn": 5,
              "endLineNumber": 2658,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2660,
              "startColumn": 5,
              "endLineNumber": 2837,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2882,
              "startColumn": 5,
              "endLineNumber": 2889,
              "endColumn": 54
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1574
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 15,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_socket_overrides_memory`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_socket_overrides_memory%22%5D \"tests/test_ssl.py\") test in the [`TestMemoryBIO`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestMemoryBIO%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the `bio_read`, `bio_write`, and `bio_shutdown` methods of the `Connection` class when the `Connection` uses sockets instead of a memory BIO.\n\nHere is the JSON object representing the functions that the [`test_socket_overrides_memory`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_socket_overrides_memory%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestMemoryBIO.test_socket_overrides_memory\": [\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.bio_shutdown\"\n    ]\n}\n```\n\nThis means that the [`test_socket_overrides_memory`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_socket_overrides_memory%22%5D \"tests/test_ssl.py\") test is testing the [`bio_read`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22bio_read%22%5D \"src/OpenSSL/SSL.py\"), [`bio_write`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22bio_write%22%5D \"src/OpenSSL/SSL.py\"), and [`bio_shutdown`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22bio_shutdown%22%5D \"src/OpenSSL/SSL.py\") methods of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.SSL.Connection.bio_read`: This method reads data from the input BIO of the `Connection`. The test is checking that this method raises a `TypeError` when the `Connection` uses sockets, so it's testing that the `bio_read` method correctly handles this case.\n\n- `src.OpenSSL.SSL.Connection.bio_write`: This method writes data to the output BIO of the `Connection`. The test is checking that this method raises a `TypeError` when the `Connection` uses sockets, so it's testing that the `bio_write` method correctly handles this case.\n\n- `src.OpenSSL.SSL.Connection.bio_shutdown`: This method signals the end of the data stream from which the `Connection` reads. The test is checking that this method raises a `TypeError` when the `Connection` uses sockets, so it's testing that the `bio_shutdown` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What is the purpose of the `test_outgoing_overflow` unit test in the `TestMemoryBIO` class?",
          "title": "What is the purpose of the `test_outgoing_overflow` unit test in the `TestMemoryBIO` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3555,
              "startColumn": 1,
              "endLineNumber": 3755,
              "endColumn": 2
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestServerNameCallback.test_no_servername, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2593
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 33,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestServerNameCallback.test_no_servername, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestServerNameCallback.test_no_servername, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n        \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback.<locals>.wrapper\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.get_servername\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.bio_write\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection._handle_bio_errors\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_no_servername`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_no_servername%22%5D \"tests/test_ssl.py\") test in the [`TestServerNameCallback`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestServerNameCallback%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the `set_tlsext_servername_callback` method of the `Context` class and the `get_servername` method of the `Connection` class when the client specifies no server name.\n\nHere is the JSON object representing the functions that the [`test_no_servername`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_no_servername%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestServerNameCallback.test_no_servername\": [\n        \"src.OpenSSL.SSL.Context.set_tlsext_servername_callback\",\n        \"src.OpenSSL.SSL.Connection.get_servername\"\n    ]\n}\n```\n\nThis means that the [`test_no_servername`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_no_servername%22%5D \"tests/test_ssl.py\") test is testing the [`set_tlsext_servername_callback`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22set_tlsext_servername_callback%22%5D \"src/OpenSSL/SSL.py\") method of the `Context` class and the [`get_servername`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22get_servername%22%5D \"src/OpenSSL/SSL.py\") method of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.SSL.Context.set_tlsext_servername_callback`: This method sets a callback function that will be called when the server name extension is received from the client. The test is checking that this callback function is invoked when the client specifies no server name, so it's testing that the `set_tlsext_servername_callback` method correctly handles this case.\n\n- `src.OpenSSL.SSL.Connection.get_servername`: This method returns the server name from the client hello message. The test is checking that this method returns `None` when the client specifies no server name, so it's testing that the `get_servername` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which unit test in the `TestServerNameCallback` class tests the behavior of the `set_tlsext_servername_callback` method when the client specifies a server name in its hello message?",
          "title": "Which unit test in the `TestServerNameCallback` class tests the behavior of the `set_tlsext_servername_callback` method when the client specifies a server name in its hello message?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1750,
              "startColumn": 1,
              "endLineNumber": 1857,
              "endColumn": 1
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2321,
              "startColumn": 5,
              "endLineNumber": 2333,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2926,
              "startColumn": 5,
              "endLineNumber": 2933,
              "endColumn": 46
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3001,
              "startColumn": 5,
              "endLineNumber": 3013,
              "endColumn": 76
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4307,
              "startColumn": 8,
              "endLineNumber": 4308,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.tests.test_ssl.TestConnection.test_get_cipher_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{     \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2339
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 28,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.tests.test_ssl.TestConnection.test_get_cipher_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{     \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.tests.test_ssl.TestConnection.test_get_cipher_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{     \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_get_cipher_version`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_cipher_version%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the `get_cipher_version` method of the `Connection` class.\n\nHere is the JSON object representing the function that the [`test_get_cipher_version`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_cipher_version%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_get_cipher_version\": [\n        \"src.OpenSSL.SSL.Connection.get_cipher_version\"\n    ]\n}\n```\n\nThis means that the [`test_get_cipher_version`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_get_cipher_version%22%5D \"tests/test_ssl.py\") test is testing the [`get_cipher_version`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22get_cipher_version%22%5D \"src/OpenSSL/SSL.py\") method of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Connection.get_cipher_version`: This method returns a string giving the protocol name of the currently used cipher. The test is checking that this method returns a string and that the server and client have the same cipher version, so it's testing that the `get_cipher_version` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other unit tests are present in the `TestConnection` class of the `tests/test_ssl.py` file?",
          "title": "What other unit tests are present in the `TestConnection` class of the `tests/test_ssl.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2935,
              "startColumn": 5,
              "endLineNumber": 2949,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2951,
              "startColumn": 5,
              "endLineNumber": 2958,
              "endColumn": 49
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2960,
              "startColumn": 5,
              "endLineNumber": 2974,
              "endColumn": 62
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2985,
              "startColumn": 5,
              "endLineNumber": 2999,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3001,
              "startColumn": 5,
              "endLineNumber": 3013,
              "endColumn": 76
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3015,
              "startColumn": 5,
              "endLineNumber": 3027,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3063,
              "startColumn": 8,
              "endLineNumber": 3064,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n\t\"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1777
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 17,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n\t\"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n\t\"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_load_privatekey_passphrase_wrong_return_type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_passphrase_wrong_return_type%22%5D \"tests/test_crypto.py\") test in the [`TestFunction`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestFunction%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the `load_privatekey` method of the `crypto` module when the passphrase callback returns something other than a byte string.\n\nHere is the JSON object representing the function that the [`test_load_privatekey_passphrase_wrong_return_type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_passphrase_wrong_return_type%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestFunction.test_load_privatekey_passphrase_wrong_return_type\": [\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ]\n}\n```\n\nThis means that the [`test_load_privatekey_passphrase_wrong_return_type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_passphrase_wrong_return_type%22%5D \"tests/test_crypto.py\") test is testing the [`load_privatekey`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_privatekey%22%5D \"src/OpenSSL/crypto.py\") method of the `crypto` module in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.load_privatekey`: This method loads a private key from a buffer. The test is checking that this method raises a `ValueError` if the passphrase callback returns something other than a byte string, so it's testing that the `load_privatekey` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other tests are present in the `TestFunction` class in `tests/test_crypto.py`?",
          "title": "What other tests are present in the `TestFunction` class in `tests/test_crypto.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2673,
              "startColumn": 5,
              "endLineNumber": 2681,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2683,
              "startColumn": 5,
              "endLineNumber": 2690,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2692,
              "startColumn": 5,
              "endLineNumber": 2701,
              "endColumn": 59
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2727,
              "startColumn": 5,
              "endLineNumber": 2742,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2859,
              "endColumn": 2
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestPKey.test_check_pr_897, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1724
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 18,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestPKey.test_check_pr_897, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestPKey.test_check_pr_897, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.PKey.check\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.PKey.type\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_check_pr_897`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_check_pr_897%22%5D \"tests/test_crypto.py\") test in the [`TestPKey`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestPKey%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the `load_privatekey` and `PKey.check` methods of the `crypto` module when provided with a broken key.\n\nHere is the JSON object representing the functions that the [`test_check_pr_897`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_check_pr_897%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestPKey.test_check_pr_897\": [\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL.crypto.PKey.check\"\n    ]\n}\n```\n\nThis means that the [`test_check_pr_897`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_check_pr_897%22%5D \"tests/test_crypto.py\") test is testing the [`load_privatekey`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_privatekey%22%5D \"src/OpenSSL/crypto.py\") and [`PKey.check`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22PKey.check%22%5D \"src/OpenSSL/crypto.py\") methods of the `crypto` module in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.crypto.load_privatekey`: This method loads a private key from a buffer. The test is checking that this method raises an `OpenSSL.crypto.Error` if provided with a broken key, so it's testing that the `load_privatekey` method correctly handles this case.\n\n- `src.OpenSSL.crypto.PKey.check`: This method checks the consistency of an RSA private key. The test is checking that this method raises an `OpenSSL.crypto.Error` if the key is not consistent, so it's testing that the `PKey.check` method correctly handles this case.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different methods being tested in the `TestPKey` class of the `tests/test_crypto.py` file?",
          "title": "What are the different methods being tested in the `TestPKey` class of the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1046,
              "startColumn": 5,
              "endLineNumber": 1054,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1069,
              "startColumn": 5,
              "endLineNumber": 1078,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1119,
              "startColumn": 45,
              "endLineNumber": 1119,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1121,
              "startColumn": 5,
              "endLineNumber": 1131,
              "endColumn": 27
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1160,
              "startColumn": 5,
              "endLineNumber": 1167,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1169,
              "startColumn": 5,
              "endLineNumber": 1181,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1183,
              "startColumn": 5,
              "endLineNumber": 1190,
              "endColumn": 25
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestDTLS.test_timeout, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1611
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 16,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestDTLS.test_timeout, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestDTLS.test_timeout, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.bio_read\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_timeout`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_timeout%22%5D \"tests/test_ssl.py\") test in the [`TestDTLS`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestDTLS%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`DTLSv1_get_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_get_timeout%22%5D \"src/OpenSSL/SSL.py\") and [`DTLSv1_handle_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_handle_timeout%22%5D \"src/OpenSSL/SSL.py\") methods of the [`Connection`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection%22%5D \"src/OpenSSL/SSL.py\") class.\n\nHere is the JSON object representing the functions that the [`test_timeout`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_timeout%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestDTLS.test_timeout\": [\n        \"src.OpenSSL.SSL.Connection.DTLSv1_get_timeout\",\n        \"src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout\"\n    ]\n}\n```\n\nThis means that the [`test_timeout`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_timeout%22%5D \"tests/test_ssl.py\") test is testing the [`DTLSv1_get_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_get_timeout%22%5D \"src/OpenSSL/SSL.py\") and [`DTLSv1_handle_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_handle_timeout%22%5D \"src/OpenSSL/SSL.py\") methods of the [`Connection`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection%22%5D \"src/OpenSSL/SSL.py\") class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.SSL.Connection.DTLSv1_get_timeout`: This method determines when the DTLS SSL object next needs to perform internal processing due to the passage of time. The test is checking that this method returns a number of seconds before the next timeout or `None` if no timeout is currently active, so it's testing that the [`DTLSv1_get_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_get_timeout%22%5D \"src/OpenSSL/SSL.py\") method correctly handles these cases.\n\n- `src.OpenSSL.SSL.Connection.DTLSv1_handle_timeout`: This method handles the timeout for the DTLS SSL object. The test is checking that this method returns `True` if the timeout was handled or raises an [`Error`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Error%22%5D \"src/OpenSSL/SSL.py\") if the maximum number of allowed timeouts is reached, so it's testing that the [`DTLSv1_handle_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22DTLSv1_handle_timeout%22%5D \"src/OpenSSL/SSL.py\") method correctly handles these cases.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which unit test in the `tests/test_ssl.py` file is testing the behavior of the `get_finished` method of the `Connection` class?",
          "title": "Which unit test in the `tests/test_ssl.py` file is testing the behavior of the `get_finished` method of the `Connection` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2281,
              "startColumn": 5,
              "endLineNumber": 2297,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 804,
              "startColumn": 5,
              "endLineNumber": 811,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 813,
              "startColumn": 5,
              "endLineNumber": 821,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2441,
              "startColumn": 5,
              "endLineNumber": 2455,
              "endColumn": 76
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2873,
              "startColumn": 5,
              "endLineNumber": 2880,
              "endColumn": 49
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2882,
              "startColumn": 5,
              "endLineNumber": 2889,
              "endColumn": 54
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2891,
              "startColumn": 5,
              "endLineNumber": 2900,
              "endColumn": 46
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2902,
              "startColumn": 5,
              "endLineNumber": 2911,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2913,
              "startColumn": 5,
              "endLineNumber": 2924,
              "endColumn": 67
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4513,
              "startColumn": 5,
              "endLineNumber": 4547,
              "endColumn": 38
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509Req.test_construction, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1269
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 9,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509Req.test_construction, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509Req.test_construction, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.set_version\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_construction`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_construction%22%5D \"tests/test_crypto.py\") test in the [`TestX509Req`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509Req%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22__init__%22%5D \"tests/test_crypto.py\") method of the `X509Req` class in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_construction`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_construction%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509Req.test_construction\": [\n        \"src.OpenSSL.crypto.X509Req.__init__\"\n    ]\n}\n```\n\nThis means that the [`test_construction`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_construction%22%5D \"tests/test_crypto.py\") test is testing the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Req.__init__%22%5D \"src/OpenSSL/crypto.py\") method of the `X509Req` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.X509Req.__init__`: This method initializes a new instance of the `X509Req` class. The test is checking that this method takes no arguments and returns an `X509Req` instance, so it's testing that the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22__init__%22%5D \"tests/test_crypto.py\") method correctly initializes `X509Req` instances.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `X509Req` class in the `crypto` module are tested in the `TestX509Req` class?",
          "title": "What other methods of the `X509Req` class in the `crypto` module are tested in the `TestX509Req` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1529,
              "startColumn": 1,
              "endLineNumber": 1651,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1704,
              "startColumn": 5,
              "endLineNumber": 1709,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestRevoked.test_set_reason_invalid_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1229
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 8,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestRevoked.test_set_reason_invalid_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestRevoked.test_set_reason_invalid_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_reason_invalid_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_set_reason_invalid_reason%22%5D \"tests/test_crypto.py\") test in the [`TestRevoked`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestRevoked%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.set_reason%22%5D \"src/OpenSSL/crypto.py\") method of the `Revoked` class in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_set_reason_invalid_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_set_reason_invalid_reason%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestRevoked.test_set_reason_invalid_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\"\n    ]\n}\n```\n\nThis means that the [`test_set_reason_invalid_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_set_reason_invalid_reason%22%5D \"tests/test_crypto.py\") test is testing the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.set_reason%22%5D \"src/OpenSSL/crypto.py\") method of the `Revoked` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.Revoked.set_reason`: This method sets the reason for the revocation. The test is checking that this method raises a `ValueError` when called with an argument that isn't a valid reason, so it's testing that the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.set_reason%22%5D \"src/OpenSSL/crypto.py\") method correctly handles invalid reasons.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other tests are present in the `TestRevoked` class in the `tests/test_crypto.py` file?",
          "title": "What other tests are present in the `TestRevoked` class in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3121,
              "startColumn": 1,
              "endLineNumber": 3229,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestRevoked.test_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1496
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestRevoked.test_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestRevoked.test_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_reason%22%5D \"tests/test_crypto.py\") test in the [`TestRevoked`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestRevoked%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.set_reason%22%5D \"src/OpenSSL/crypto.py\"), [`get_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.get_reason%22%5D \"src/OpenSSL/crypto.py\"), and [`all_reasons`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.all_reasons%22%5D \"src/OpenSSL/crypto.py\") methods of the [`Revoked`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked%22%5D \"src/OpenSSL/crypto.py\") class in the `crypto` module.\n\nHere is the JSON object representing the functions that the [`test_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_reason%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestRevoked.test_reason\": [\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.Revoked.get_reason\",\n        \"src.OpenSSL.crypto.Revoked.all_reasons\"\n    ]\n}\n```\n\nThis means that the [`test_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_reason%22%5D \"tests/test_crypto.py\") test is testing the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.set_reason%22%5D \"src/OpenSSL/crypto.py\"), [`get_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.get_reason%22%5D \"src/OpenSSL/crypto.py\"), and [`all_reasons`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked.all_reasons%22%5D \"src/OpenSSL/crypto.py\") methods of the [`Revoked`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22Revoked%22%5D \"src/OpenSSL/crypto.py\") class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.crypto.Revoked.set_reason`: This method sets the reason for the revocation. The test is checking that this method correctly sets the reason and that it can be called multiple times with different reasons.\n\n- `src.OpenSSL.crypto.Revoked.get_reason`: This method gets the reason for the revocation. The test is checking that this method correctly returns the reason that was set using the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22set_reason%22%5D \"src/OpenSSL/crypto.py\") method.\n\n- `src.OpenSSL.crypto.Revoked.all_reasons`: This method returns a list of all the supported reason strings. The test is checking that all the reasons returned by this method can be used as arguments to the [`set_reason`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22set_reason%22%5D \"src/OpenSSL/crypto.py\") method.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the supported reason strings for revocation in the `OpenSSL.crypto.Revoked` class?",
          "title": "What are the supported reason strings for revocation in the `OpenSSL.crypto.Revoked` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2325,
              "startColumn": 5,
              "endLineNumber": 2335,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3121,
              "startColumn": 1,
              "endLineNumber": 3229,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestConnection.test_set_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1405
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 12,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestConnection.test_set_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestConnection.test_set_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_context\",\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_context%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`set_context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.set_context%22%5D \"src/OpenSSL/SSL.py\") and [`get_context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.get_context%22%5D \"src/OpenSSL/SSL.py\") methods of the `Connection` class in the `SSL` module.\n\nHere is the JSON object representing the functions that the [`test_set_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_context%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_set_context\": [\n        \"src.OpenSSL.SSL.Connection.set_context\",\n        \"src.OpenSSL.SSL.Connection.get_context\"\n    ]\n}\n```\n\nThis means that the [`test_set_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_context%22%5D \"tests/test_ssl.py\") test is testing the [`set_context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.set_context%22%5D \"src/OpenSSL/SSL.py\") and [`get_context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.get_context%22%5D \"src/OpenSSL/SSL.py\") methods of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.SSL.Connection.set_context`: This method sets the `Context` instance to be used for the connection. The test is checking that this method correctly sets the context and that it can be called with a different context.\n\n- `src.OpenSSL.SSL.Connection.get_context`: This method gets the `Context` instance used for the connection. The test is checking that this method correctly returns the context that was set using the [`set_context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.set_context%22%5D \"src/OpenSSL/SSL.py\") method.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `Connection` class in the `SSL` module are tested in the `TestConnection` class in `tests/test_ssl.py`?",
          "title": "What other methods of the `Connection` class in the `SSL` module are tested in the `TestConnection` class in `tests/test_ssl.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 779,
              "startColumn": 5,
              "endLineNumber": 785,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 796,
              "startColumn": 5,
              "endLineNumber": 802,
              "endColumn": 77
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 813,
              "startColumn": 5,
              "endLineNumber": 821,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1019,
              "startColumn": 5,
              "endLineNumber": 1043,
              "endColumn": 61
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2281,
              "startColumn": 5,
              "endLineNumber": 2288,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2290,
              "startColumn": 5,
              "endLineNumber": 2303,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2305,
              "startColumn": 5,
              "endLineNumber": 2319,
              "endColumn": 18
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509Name.test_only_string_attributes, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1496
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 13,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509Name.test_only_string_attributes, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509Name.test_only_string_attributes, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_only_string_attributes`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_only_string_attributes%22%5D \"tests/test_crypto.py\") test in the [`TestX509Name`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509Name%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`__setattr__`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Name.__setattr__%22%5D \"src/OpenSSL/crypto.py\") method of the `X509Name` class in the `crypto` module.\n\nHere is the JSON object representing the functions that the [`test_only_string_attributes`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_only_string_attributes%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509Name.test_only_string_attributes\": [\n        \"src.OpenSSL.crypto.X509Name.__setattr__\"\n    ]\n}\n```\n\nThis means that the [`test_only_string_attributes`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_only_string_attributes%22%5D \"tests/test_crypto.py\") test is testing the [`__setattr__`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Name.__setattr__%22%5D \"src/OpenSSL/crypto.py\") method of the `X509Name` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.X509Name.__setattr__`: This method sets the attribute of an `X509Name` instance. The test is checking that this method correctly raises a `TypeError` when attempting to set a non-string attribute name on an `X509Name` instance.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other unit tests are there in the `TestX509Name` class of the `tests.test_crypto` module?",
          "title": "What other unit tests are there in the `TestX509Name` class of the `tests.test_crypto` module?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1211,
              "startColumn": 1,
              "endLineNumber": 1439,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1452,
              "startColumn": 5,
              "endLineNumber": 1461,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1379
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 12,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_dump_crl%22%5D \"tests/test_crypto.py\") test in the [`TestCRL`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestCRL%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`load_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_crl%22%5D \"src/OpenSSL/crypto.py\") and [`dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22dump_crl%22%5D \"src/OpenSSL/crypto.py\") functions in the `crypto` module.\n\nHere is the JSON object representing the functions that the [`test_dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_dump_crl%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto.dump_crl\"\n    ]\n}\n```\n\nThis means that the [`test_dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_dump_crl%22%5D \"tests/test_crypto.py\") test is testing the [`load_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_crl%22%5D \"src/OpenSSL/crypto.py\") and [`dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22dump_crl%22%5D \"src/OpenSSL/crypto.py\") functions in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.crypto.load_crl`: This function loads a CRL (Certificate Revocation List) from a string buffer. The test is checking that this function correctly loads the CRL data.\n\n- `src.OpenSSL.crypto.dump_crl`: This function dumps a CRL to a string buffer. The test is checking that this function correctly dumps the CRL data and that the dumped data matches the original input.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which functions in the `crypto` module of the `OpenSSL` library are being tested in the `TestCRL` class of the `tests/test_crypto.py` file?",
          "title": "Which functions in the `crypto` module of the `OpenSSL` library are being tested in the `TestCRL` class of the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3231,
              "startColumn": 1,
              "endLineNumber": 3348,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3500,
              "startColumn": 5,
              "endLineNumber": 3506,
              "endColumn": 30
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3641,
              "startColumn": 5,
              "endLineNumber": 3644,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3650,
              "startColumn": 5,
              "endLineNumber": 3653,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509Req.test_undef_oid, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1213
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 8,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509Req.test_undef_oid, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509Req.test_undef_oid, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_undef_oid`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_undef_oid%22%5D \"tests/test_crypto.py\") test in the [`TestX509Req`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509Req%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Extension.__init__%22%5D \"src/OpenSSL/crypto.py\") and [`get_short_name`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Extension.get_short_name%22%5D \"src/OpenSSL/crypto.py\") methods of the `X509Extension` class in the `crypto` module.\n\nHere is the JSON object representing the functions that the [`test_undef_oid`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_undef_oid%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509Req.test_undef_oid\": [\n        \"src.OpenSSL.crypto.X509Extension.__init__\",\n        \"src.OpenSSL.crypto.X509Extension.get_short_name\"\n    ]\n}\n```\n\nThis means that the [`test_undef_oid`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_undef_oid%22%5D \"tests/test_crypto.py\") test is testing the [`__init__`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Extension.__init__%22%5D \"src/OpenSSL/crypto.py\") and [`get_short_name`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Extension.get_short_name%22%5D \"src/OpenSSL/crypto.py\") methods of the `X509Extension` class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.crypto.X509Extension.__init__`: This method initializes an `X509Extension` instance. The test is checking that this method correctly handles an undefined OID (Object Identifier) and does not raise an error.\n\n- `src.OpenSSL.crypto.X509Extension.get_short_name`: This method gets the short name of an `X509Extension` instance. The test is checking that this method correctly returns the short name as \"UNDEF\" when the OID is undefined.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other unit tests are present in the `tests/test_crypto.py` file?",
          "title": "What other unit tests are present in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 934,
              "startColumn": 5,
              "endLineNumber": 947,
              "endColumn": 34
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 974,
              "startColumn": 5,
              "endLineNumber": 986,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1223,
              "startColumn": 9,
              "endLineNumber": 1223,
              "endColumn": 18
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1325,
              "startColumn": 9,
              "endLineNumber": 1326,
              "endColumn": 55
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1349,
              "startColumn": 9,
              "endLineNumber": 1350,
              "endColumn": 55
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1361,
              "startColumn": 9,
              "endLineNumber": 1369,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1371,
              "startColumn": 9,
              "endLineNumber": 1372,
              "endColumn": 57
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1398,
              "startColumn": 45,
              "endLineNumber": 1398,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1631,
              "startColumn": 5,
              "endLineNumber": 1637,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2038,
              "startColumn": 5,
              "endLineNumber": 2054,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2196,
              "startColumn": 1,
              "endLineNumber": 2203,
              "endColumn": 66
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1697
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 16,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto._PassphraseHelper._read_passphrase\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_load_privatekey_wrongPassphrase`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_wrongPassphrase%22%5D \"tests/test_crypto.py\") test in the [`TestFunction`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestFunction%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`load_privatekey`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_privatekey%22%5D \"src/OpenSSL/crypto.py\") function in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_load_privatekey_wrongPassphrase`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_wrongPassphrase%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestFunction.test_load_privatekey_wrongPassphrase\": [\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ]\n}\n```\n\nThis means that the [`test_load_privatekey_wrongPassphrase`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_privatekey_wrongPassphrase%22%5D \"tests/test_crypto.py\") test is testing the [`load_privatekey`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_privatekey%22%5D \"src/OpenSSL/crypto.py\") function in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.load_privatekey`: This function loads a private key from a buffer. The test is checking that this function correctly raises an `OpenSSL.crypto.Error` when it is passed an encrypted PEM and an incorrect passphrase.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the other unit tests in the `TestFunction` class in `tests/test_crypto.py` file?",
          "title": "What are the other unit tests in the `TestFunction` class in `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2683,
              "startColumn": 5,
              "endLineNumber": 2690,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2692,
              "startColumn": 5,
              "endLineNumber": 2701,
              "endColumn": 59
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2703,
              "startColumn": 5,
              "endLineNumber": 2713,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2727,
              "startColumn": 5,
              "endLineNumber": 2742,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_timeout_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1321
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 10,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_timeout_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_timeout_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_timeout_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_timeout_wrong_args%22%5D \"tests/test_ssl.py\") test in the [`TestContext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestContext%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`set_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_timeout%22%5D \"src/OpenSSL/SSL.py\") method of the `Context` class in the `SSL` module.\n\nHere is the JSON object representing the function that the [`test_set_timeout_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_timeout_wrong_args%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_timeout_wrong_args\": [\n        \"src.OpenSSL.SSL.Context.set_timeout\"\n    ]\n}\n```\n\nThis means that the [`test_set_timeout_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_timeout_wrong_args%22%5D \"tests/test_ssl.py\") test is testing the [`set_timeout`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_timeout%22%5D \"src/OpenSSL/SSL.py\") method of the `Context` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Context.set_timeout`: This method sets the session timeout for all connections created using the context object. The test is checking that this method correctly raises a `TypeError` when it is passed a non-integer argument.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `Context` class in the `SSL` module are tested in the `TestContext` class in `tests/test_ssl.py`?",
          "title": "What other methods of the `Context` class in the `SSL` module are tested in the `TestContext` class in `tests/test_ssl.py`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 770,
              "startColumn": 5,
              "endLineNumber": 777,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 787,
              "startColumn": 5,
              "endLineNumber": 899,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2290,
              "startColumn": 5,
              "endLineNumber": 2303,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4513,
              "startColumn": 5,
              "endLineNumber": 4547,
              "endColumn": 38
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContextConnection.test_use_certificate, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1558
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContextConnection.test_use_certificate, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContextConnection.test_use_certificate, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_use_certificate`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_use_certificate%22%5D \"tests/test_ssl.py\") test in the [`TestContextConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestContextConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`use_certificate`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.use_certificate%22%5D \"src/OpenSSL/SSL.py\") method of the `Context` and `Connection` classes in the `SSL` module.\n\nHere is the JSON object representing the functions that the [`test_use_certificate`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_use_certificate%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestContextConnection.test_use_certificate\": [\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.SSL.Connection.use_certificate\"\n    ]\n}\n```\n\nThis means that the [`test_use_certificate`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_use_certificate%22%5D \"tests/test_ssl.py\") test is testing the [`use_certificate`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.use_certificate%22%5D \"src/OpenSSL/SSL.py\") method of the `Context` and `Connection` classes in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.SSL.Context.use_certificate`: This method sets the certificate which will be used to identify connections created using the context. The test is checking that this method correctly sets the certificate when it is passed a valid [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") certificate.\n\n- `src.OpenSSL.SSL.Connection.use_certificate`: This method sets the certificate which will be used to identify the connection. The test is checking that this method correctly sets the certificate when it is passed a valid [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") certificate.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods of the `Context` and `Connection` classes in the `SSL` module are tested in the `TestContextConnection` class?",
          "title": "What other methods of the `Context` and `Connection` classes in the `SSL` module are tested in the `TestContextConnection` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 679,
              "startColumn": 5,
              "endLineNumber": 690,
              "endColumn": 61
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 701,
              "startColumn": 5,
              "endLineNumber": 714,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 716,
              "startColumn": 5,
              "endLineNumber": 723,
              "endColumn": 50
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 725,
              "startColumn": 5,
              "endLineNumber": 732,
              "endColumn": 50
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2192,
              "startColumn": 5,
              "endLineNumber": 2203,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2205,
              "startColumn": 5,
              "endLineNumber": 2211,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2213,
              "startColumn": 5,
              "endLineNumber": 2220,
              "endColumn": 48
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestConnection.test_connect_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1410
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 12,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestConnection.test_connect_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestConnection.test_connect_wrong_args, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.connect\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_connect_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_connect_wrong_args%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`connect`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.connect%22%5D \"src/OpenSSL/SSL.py\") method of the `Connection` class in the `SSL` module.\n\nHere is the JSON object representing the function that the [`test_connect_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_connect_wrong_args%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_connect_wrong_args\": [\n        \"src.OpenSSL.SSL.Connection.connect\"\n    ]\n}\n```\n\nThis means that the [`test_connect_wrong_args`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_connect_wrong_args%22%5D \"tests/test_ssl.py\") test is testing the [`connect`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.connect%22%5D \"src/OpenSSL/SSL.py\") method of the `Connection` class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Connection.connect`: This method initiates the SSL/TLS handshake with a server at a specified address. The test is checking that this method correctly raises a `TypeError` when it is passed a non-address argument.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which functions in the `tests.test_ssl.TestConnection` class are being tested for incorrect arguments?",
          "title": "Which functions in the `tests.test_ssl.TestConnection` class are being tested for incorrect arguments?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2205,
              "startColumn": 5,
              "endLineNumber": 2211,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2249,
              "startColumn": 5,
              "endLineNumber": 2256,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2290,
              "startColumn": 5,
              "endLineNumber": 2303,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2321,
              "startColumn": 5,
              "endLineNumber": 2333,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2354,
              "startColumn": 5,
              "endLineNumber": 2361,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2432,
              "startColumn": 5,
              "endLineNumber": 2439,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3097,
              "startColumn": 5,
              "endLineNumber": 3106,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3305,
              "startColumn": 5,
              "endLineNumber": 3314,
              "endColumn": 42
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2141
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 23,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509Name.__getattr__\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\",\n        \"src.OpenSSL.crypto.X509StoreContextError.__init__\",\n        \"src.OpenSSL.crypto.X509._get_name\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509Name.__setattr__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.add\",\n        \"src.OpenSSL.crypto.X509Store.add_cert\",\n        \"src.OpenSSL.crypto.X509StoreContext._exception_from_context\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto.X509.get_subject\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_get_verified_chain_invalid_chain_no_root`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_get_verified_chain_invalid_chain_no_root%22%5D \"tests/test_crypto.py\") test in the [`TestX509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509StoreContext%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`get_verified_chain`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext.get_verified_chain%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext%22%5D \"src/OpenSSL/crypto.py\") class in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_get_verified_chain_invalid_chain_no_root`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_get_verified_chain_invalid_chain_no_root%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509StoreContext.test_get_verified_chain_invalid_chain_no_root\": [\n        \"src.OpenSSL.crypto.X509StoreContext.get_verified_chain\"\n    ]\n}\n```\n\nThis means that the [`test_get_verified_chain_invalid_chain_no_root`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_get_verified_chain_invalid_chain_no_root%22%5D \"tests/test_crypto.py\") test is testing the [`get_verified_chain`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext.get_verified_chain%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext%22%5D \"src/OpenSSL/crypto.py\") class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.X509StoreContext.get_verified_chain`: This method returns the verified certificate chain for the X509StoreContext. The test is checking that this method correctly raises an [`X509StoreContextError`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContextError%22%5D \"src/OpenSSL/crypto.py\") when the certificate chain is invalid because it lacks a root certificate.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods are tested in the `TestX509StoreContext` class in the `tests/test_crypto.py` file?",
          "title": "What other methods are tested in the `TestX509StoreContext` class in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3667,
              "startColumn": 5,
              "endLineNumber": 3676,
              "endColumn": 54
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3690,
              "startColumn": 5,
              "endLineNumber": 3717,
              "endColumn": 54
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3751,
              "startColumn": 5,
              "endLineNumber": 3788,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3856,
              "startColumn": 5,
              "endLineNumber": 3869,
              "endColumn": 72
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3871,
              "startColumn": 5,
              "endLineNumber": 3884,
              "endColumn": 80
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3928,
              "startColumn": 5,
              "endLineNumber": 3947,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3949,
              "startColumn": 5,
              "endLineNumber": 3961,
              "endColumn": 72
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4038,
              "startColumn": 50,
              "endLineNumber": 4039,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1627
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext._verify_certificate\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509StoreContext._build_certificate_stack\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.__init__\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\",\n        \"src.OpenSSL._util.path_bytes\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_verify_with_ca_file_location`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_verify_with_ca_file_location%22%5D \"tests/test_crypto.py\") test in the [`TestX509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509StoreContext%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`load_locations`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Store.load_locations%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509Store`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Store%22%5D \"src/OpenSSL/crypto.py\") class and the [`verify_certificate`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext.verify_certificate%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext%22%5D \"src/OpenSSL/crypto.py\") class in the `crypto` module.\n\nHere is the JSON object representing the functions that the [`test_verify_with_ca_file_location`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_verify_with_ca_file_location%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509StoreContext.test_verify_with_ca_file_location\": [\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL.crypto.X509StoreContext.verify_certificate\"\n    ]\n}\n```\n\nThis means that the [`test_verify_with_ca_file_location`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_verify_with_ca_file_location%22%5D \"tests/test_crypto.py\") test is testing the [`load_locations`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Store.load_locations%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509Store`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Store%22%5D \"src/OpenSSL/crypto.py\") class and the [`verify_certificate`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext.verify_certificate%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509StoreContext`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509StoreContext%22%5D \"src/OpenSSL/crypto.py\") class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why these functions are being tested:\n\n- `src.OpenSSL.crypto.X509Store.load_locations`: This method loads the trusted CA certificates from the specified file or directory. The test is checking that this method correctly loads the CA certificates when it is passed a valid file path.\n\n- `src.OpenSSL.crypto.X509StoreContext.verify_certificate`: This method verifies a certificate using the context's store. The test is checking that this method correctly verifies the certificate when the store has been loaded with the correct CA certificates.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What is the purpose of the `test_load_locations_parameters` test in the `TestX509Store` class?",
          "title": "What is the purpose of the `test_load_locations_parameters` test in the `TestX509Store` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2277,
              "startColumn": 5,
              "endLineNumber": 2324,
              "endColumn": 46
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2331,
              "startColumn": 5,
              "endLineNumber": 2337,
              "endColumn": 62
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3982,
              "startColumn": 5,
              "endLineNumber": 3987,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3989,
              "startColumn": 5,
              "endLineNumber": 3994,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3996,
              "startColumn": 5,
              "endLineNumber": 4005,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4007,
              "startColumn": 5,
              "endLineNumber": 4015,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4017,
              "startColumn": 5,
              "endLineNumber": 4025,
              "endColumn": 74
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1085,
              "startColumn": 5,
              "endLineNumber": 1095,
              "endColumn": 49
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_default_verify_paths, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2414
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 30,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_default_verify_paths, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_default_verify_paths, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Connection.recv\",\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.set_tlsext_host_name\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.send\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Context._check_env_vars_set\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.load_verify_locations\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL._util.path_bytes\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_default_verify_paths%22%5D \"tests/test_ssl.py\") test in the [`TestContext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestContext%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`set_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_default_verify_paths%22%5D \"src/OpenSSL/SSL.py\") method of the [`Context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context%22%5D \"src/OpenSSL/SSL.py\") class in the `SSL` module.\n\nHere is the JSON object representing the function that the [`test_set_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_default_verify_paths%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_default_verify_paths\": [\n        \"src.OpenSSL.SSL.Context.set_default_verify_paths\"\n    ]\n}\n```\n\nThis means that the [`test_set_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_default_verify_paths%22%5D \"tests/test_ssl.py\") test is testing the [`set_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_default_verify_paths%22%5D \"src/OpenSSL/SSL.py\") method of the [`Context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context%22%5D \"src/OpenSSL/SSL.py\") class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Context.set_default_verify_paths`: This method sets the default paths for the context to search for trusted CA certificates. The test is checking that this method correctly sets the default paths and that these paths are used for verification purposes.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which functions in the `tests/test_ssl.py` file are being tested by the unit test `tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set`?",
          "title": "Which functions in the `tests/test_ssl.py` file are being tested by the unit test `tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 832,
              "startColumn": 5,
              "endLineNumber": 840,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1123,
              "startColumn": 5,
              "endLineNumber": 1139,
              "endColumn": 55
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1177,
              "startColumn": 5,
              "endLineNumber": 1302,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1598,
              "startColumn": 5,
              "endLineNumber": 1606,
              "endColumn": 79
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_options, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1299
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 10,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_options, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_options, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_options`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_options%22%5D \"tests/test_ssl.py\") test in the [`TestContext`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestContext%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`set_options`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_options%22%5D \"src/OpenSSL/SSL.py\") method of the [`Context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context%22%5D \"src/OpenSSL/SSL.py\") class in the `SSL` module.\n\nHere is the JSON object representing the function that the [`test_set_options`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_options%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_options\": [\n        \"src.OpenSSL.SSL.Context.set_options\"\n    ]\n}\n```\n\nThis means that the [`test_set_options`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_options%22%5D \"tests/test_ssl.py\") test is testing the [`set_options`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_options%22%5D \"src/OpenSSL/SSL.py\") method of the [`Context`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context%22%5D \"src/OpenSSL/SSL.py\") class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Context.set_options`: This method sets the options for the context. The test is checking that this method correctly sets the options and returns the new options value.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other unit tests are there in the `TestContext` and `TestConnection` classes in the `tests/test_ssl.py` file?",
          "title": "What other unit tests are there in the `TestContext` and `TestConnection` classes in the `tests/test_ssl.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 770,
              "startColumn": 5,
              "endLineNumber": 777,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 779,
              "startColumn": 5,
              "endLineNumber": 785,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 787,
              "startColumn": 5,
              "endLineNumber": 794,
              "endColumn": 35
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 796,
              "startColumn": 5,
              "endLineNumber": 802,
              "endColumn": 77
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 813,
              "startColumn": 5,
              "endLineNumber": 821,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1019,
              "startColumn": 5,
              "endLineNumber": 1043,
              "endColumn": 61
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1598,
              "startColumn": 5,
              "endLineNumber": 1606,
              "endColumn": 79
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2305,
              "startColumn": 5,
              "endLineNumber": 2319,
              "endColumn": 18
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestConnection.test_set_verify_overrides_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1539
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestConnection.test_set_verify_overrides_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestConnection.test_set_verify_overrides_context, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Connection.set_verify\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Connection.get_verify_mode\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context.get_verify_mode\",\n        \"src.OpenSSL.SSL.Connection.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_set_verify_overrides_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_verify_overrides_context%22%5D \"tests/test_ssl.py\") test in the [`TestConnection`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22TestConnection%22%5D \"tests/test_ssl.py\") class is likely designed to test the behavior of the [`set_verify`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.set_verify%22%5D \"src/OpenSSL/SSL.py\") method of the [`Connection`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection%22%5D \"src/OpenSSL/SSL.py\") class in the `SSL` module.\n\nHere is the JSON object representing the function that the [`test_set_verify_overrides_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_verify_overrides_context%22%5D \"tests/test_ssl.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_ssl.TestConnection.test_set_verify_overrides_context\": [\n        \"src.OpenSSL.SSL.Connection.set_verify\"\n    ]\n}\n```\n\nThis means that the [`test_set_verify_overrides_context`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_verify_overrides_context%22%5D \"tests/test_ssl.py\") test is testing the [`set_verify`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection.set_verify%22%5D \"src/OpenSSL/SSL.py\") method of the [`Connection`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Connection%22%5D \"src/OpenSSL/SSL.py\") class in the [`src/OpenSSL/SSL.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2FSSL.py%22%5D \"src/OpenSSL/SSL.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.SSL.Connection.set_verify`: This method sets the verification flags for the connection, overriding the flags set on the context. The test is checking that this method correctly sets the verification flags for the connection and that these flags override the ones set on the context. It also checks that the method raises a `TypeError` when called with invalid arguments.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which method in the `Connection` class of the `SSL` module is being tested in the `test_set_verify_overrides_context` unit test?",
          "title": "Which method in the `Connection` class of the `SSL` module is being tested in the `test_set_verify_overrides_context` unit test?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/SSL.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1883,
              "startColumn": 5,
              "endLineNumber": 1901,
              "endColumn": 72
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 796,
              "startColumn": 5,
              "endLineNumber": 802,
              "endColumn": 77
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 832,
              "startColumn": 5,
              "endLineNumber": 840,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1324,
              "startColumn": 5,
              "endLineNumber": 1351,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1598,
              "startColumn": 5,
              "endLineNumber": 1606,
              "endColumn": 79
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2305,
              "startColumn": 5,
              "endLineNumber": 2319,
              "endColumn": 18
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2669,
              "startColumn": 5,
              "endLineNumber": 2682,
              "endColumn": 59
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1553
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test in the [`TestX509`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.from_cryptography%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") class in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\"\n    ]\n}\n```\n\nThis means that the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test is testing the [`from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.from_cryptography%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.X509.from_cryptography`: This method converts a cryptography `Certificate` object into a [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") object. The test is checking that this method correctly converts the `Certificate` object and that the version of the resulting [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") object matches the version of the original `Certificate` object.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other methods are being tested in the `TestX509` and `TestX509Req` classes in the `tests/test_crypto.py` file?",
          "title": "What other methods are being tested in the `TestX509` and `TestX509Req` classes in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1695,
              "startColumn": 5,
              "endLineNumber": 1698,
              "endColumn": 40
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1700,
              "startColumn": 5,
              "endLineNumber": 1702,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2219,
              "startColumn": 5,
              "endLineNumber": 2224,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2226,
              "startColumn": 5,
              "endLineNumber": 2228,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2230,
              "startColumn": 5,
              "endLineNumber": 2235,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3641,
              "startColumn": 5,
              "endLineNumber": 3644,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3650,
              "startColumn": 5,
              "endLineNumber": 3653,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1553
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 14,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_convert_from_cryptography, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the provided code excerpt and the typical structure of unit tests, the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test in the [`TestX509`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22TestX509%22%5D \"tests/test_crypto.py\") class is likely designed to test the behavior of the [`from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.from_cryptography%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") class in the `crypto` module.\n\nHere is the JSON object representing the function that the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test is likely meant to test:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_convert_from_cryptography\": [\n        \"src.OpenSSL.crypto.X509.from_cryptography\"\n    ]\n}\n```\n\nThis means that the [`test_convert_from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography%22%5D \"tests/test_crypto.py\") test is testing the [`from_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.from_cryptography%22%5D \"src/OpenSSL/crypto.py\") method of the [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") class in the [`src/OpenSSL/crypto.py`](command:_github.copilot.openRelativePath?%5B%22src%2FOpenSSL%2Fcrypto.py%22%5D \"src/OpenSSL/crypto.py\") file.\n\nHere's why this function is being tested:\n\n- `src.OpenSSL.crypto.X509.from_cryptography`: This method converts a cryptography `Certificate` object into a [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") object. The test is checking that this method correctly converts the `Certificate` object and that the version of the resulting [`X509`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509%22%5D \"src/OpenSSL/crypto.py\") object matches the version of the original `Certificate` object.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What other unit tests are present in the `tests/test_crypto.py` file?",
          "title": "What other unit tests are present in the `tests/test_crypto.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1695,
              "startColumn": 5,
              "endLineNumber": 1698,
              "endColumn": 40
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1700,
              "startColumn": 5,
              "endLineNumber": 1702,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1704,
              "startColumn": 5,
              "endLineNumber": 1709,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2219,
              "startColumn": 5,
              "endLineNumber": 2224,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2226,
              "startColumn": 5,
              "endLineNumber": 2228,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2230,
              "startColumn": 5,
              "endLineNumber": 2235,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3641,
              "startColumn": 5,
              "endLineNumber": 3644,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3650,
              "startColumn": 5,
              "endLineNumber": 3653,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestSignVerify.test_sign_with_large_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1707
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 17,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestSignVerify.test_sign_with_large_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestSignVerify.test_sign_with_large_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.byte_string\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_sign_with_large_key`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_sign_with_large_key%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.sign` and `src.OpenSSL.crypto.load_privatekey` functions. These functions are directly invoked in the test and their behavior is likely what's being verified.\n\nHere's the JSON object with the functions that are likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestSignVerify.test_sign_with_large_key\": [\n        \"src.OpenSSL.crypto.sign\",\n        \"src.OpenSSL.crypto.load_privatekey\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.sign` function is likely being tested to ensure that it correctly generates a signature when using a large key. The `src.OpenSSL.crypto.load_privatekey` function is probably being tested to ensure that it correctly loads a large private key from a PEM formatted string.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`sign`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22sign%22%5D \"src/OpenSSL/crypto.py\") and [`load_privatekey`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_privatekey%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "Which functions are being tested in the unit test `tests.test_crypto.TestSignVerify.test_sign_nulls`?",
          "title": "Which functions are being tested in the unit test `tests.test_crypto.TestSignVerify.test_sign_nulls`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 104,
              "startColumn": 1,
              "endLineNumber": 112,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 176,
              "startColumn": 1,
              "endLineNumber": 184,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 339,
              "startColumn": 1,
              "endLineNumber": 347,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 362,
              "startColumn": 1,
              "endLineNumber": 370,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 1,
              "endLineNumber": 591,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 4041,
              "startColumn": 1,
              "endLineNumber": 4161,
              "endColumn": 1
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1354
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 11,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_version, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_version`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_version%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509.set_version` and `src.OpenSSL.crypto.X509.get_version` functions. These functions are directly invoked in the test and their behavior is likely what's being verified.\n\nHere's the JSON object with the functions that are likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_version\": [\n        \"src.OpenSSL.crypto.X509.set_version\",\n        \"src.OpenSSL.crypto.X509.get_version\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509.set_version` function is likely being tested to ensure that it correctly sets the version of the X509 certificate. The `src.OpenSSL.crypto.X509.get_version` function is probably being tested to ensure that it correctly retrieves the version of the X509 certificate that was previously set.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_version`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.set_version%22%5D \"src/OpenSSL/crypto.py\") and [`get_version`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.get_version%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What is the purpose of the `test_set_version_wrong_args` unit test in the `TestX509` class?",
          "title": "What is the purpose of the `test_set_version_wrong_args` unit test in the `TestX509` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1232,
              "startColumn": 5,
              "endLineNumber": 1245,
              "endColumn": 73
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1247,
              "startColumn": 5,
              "endLineNumber": 1254,
              "endColumn": 49
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1553,
              "startColumn": 5,
              "endLineNumber": 1562,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1564,
              "startColumn": 5,
              "endLineNumber": 1573,
              "endColumn": 35
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1745,
              "startColumn": 5,
              "endLineNumber": 1752,
              "endColumn": 35
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1754,
              "startColumn": 5,
              "endLineNumber": 1761,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2196,
              "startColumn": 1,
              "endLineNumber": 2203,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 408,
              "startColumn": 1,
              "endLineNumber": 437,
              "endColumn": 34
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_keylog_callback, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2517
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 32,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_keylog_callback, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_keylog_callback, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_set_keylog_callback`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_keylog_callback%22%5D \"tests/test_ssl.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.SSL.Context.set_keylog_callback` function. This function is directly invoked in the test and its behavior is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_keylog_callback\": [\n        \"src.OpenSSL.SSL.Context.set_keylog_callback\"\n    ]\n}\n```\n\nThe `src.OpenSSL.SSL.Context.set_keylog_callback` function is likely being tested to ensure that it correctly sets a callback function that will be invoked when key material is generated or received.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_keylog_callback`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_keylog_callback%22%5D \"src/OpenSSL/SSL.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different test cases covered in the `tests.test_ssl` and `tests.test_crypto` modules?",
          "title": "What are the different test cases covered in the `tests.test_ssl` and `tests.test_crypto` modules?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2727,
              "startColumn": 5,
              "endLineNumber": 2742,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2824,
              "startColumn": 5,
              "endLineNumber": 2834,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3000,
              "startColumn": 5,
              "endLineNumber": 3011,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 86,
              "startColumn": 1,
              "endLineNumber": 159,
              "endColumn": 31
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 863,
              "startColumn": 5,
              "endLineNumber": 882,
              "endColumn": 40
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 900,
              "startColumn": 1,
              "endLineNumber": 1097,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1324,
              "startColumn": 5,
              "endLineNumber": 1351,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1618,
              "startColumn": 5,
              "endLineNumber": 1626,
              "endColumn": 68
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_callback_exception, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 2793
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 37,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_callback_exception, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_callback_exception, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Connection.set_connect_state\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL.SSL.Connection.do_handshake\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.__init__\",\n        \"src.OpenSSL.crypto._PassphraseHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection._raise_ssl_error\",\n        \"src.OpenSSL.SSL.Connection.__getattr__\",\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_max_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_privatekey\",\n        \"src.OpenSSL.SSL.Context.set_min_proto_version\",\n        \"src.OpenSSL.SSL.Context.use_certificate\",\n        \"src.OpenSSL.crypto.load_privatekey\",\n        \"src.OpenSSL._util.exception_from_error_queue\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._PassphraseHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback_args\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__.<locals>.wrapper\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.SSL._asFileDescriptor\",\n        \"src.OpenSSL.SSL.Connection.__init__\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\",\n        \"src.OpenSSL.SSL._VerifyHelper.__init__\",\n        \"src.OpenSSL.SSL.Connection.set_accept_state\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL.SSL._CallbackExceptionHelper.raise_if_problem\",\n        \"src.OpenSSL.crypto._PassphraseHelper.callback\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_set_verify_callback_exception`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_verify_callback_exception%22%5D \"tests/test_ssl.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.SSL.Context.set_verify` function and how it handles exceptions raised by the callback function. This function is directly invoked in the test and its behavior is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_verify_callback_exception\": [\n        \"src.OpenSSL.SSL.Context.set_verify\"\n    ]\n}\n```\n\nThe `src.OpenSSL.SSL.Context.set_verify` function is likely being tested to ensure that it correctly handles exceptions raised by the callback function. The test is designed to raise an exception in the callback function and then checks if this exception is propagated to the caller of `Connection.do_handshake`.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_verify`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_verify%22%5D \"src/OpenSSL/SSL.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different methods available in the `OpenSSL.SSL.Context` class for setting the protocol version?",
          "title": "What are the different methods available in the `OpenSSL.SSL.Context` class for setting the protocol version?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 86,
              "startColumn": 1,
              "endLineNumber": 159,
              "endColumn": 31
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 823,
              "startColumn": 5,
              "endLineNumber": 830,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 832,
              "startColumn": 5,
              "endLineNumber": 840,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 988,
              "startColumn": 5,
              "endLineNumber": 1017,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1177,
              "startColumn": 5,
              "endLineNumber": 1210,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1324,
              "startColumn": 5,
              "endLineNumber": 1351,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1353,
              "startColumn": 5,
              "endLineNumber": 1378,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1380,
              "startColumn": 5,
              "endLineNumber": 1404,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1451,
              "startColumn": 5,
              "endLineNumber": 1472,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1598,
              "startColumn": 5,
              "endLineNumber": 1606,
              "endColumn": 79
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1618,
              "startColumn": 5,
              "endLineNumber": 1712,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2669,
              "startColumn": 5,
              "endLineNumber": 2682,
              "endColumn": 59
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_session_id_unicode, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1288
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 9,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_session_id_unicode, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_session_id_unicode, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL._util.text_to_bytes_and_warn\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_set_session_id_unicode`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_session_id_unicode%22%5D \"tests/test_ssl.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.SSL.Context.set_session_id` function. This function is directly invoked in the test and its behavior when passed a unicode string is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_session_id_unicode\": [\n        \"src.OpenSSL.SSL.Context.set_session_id\"\n    ]\n}\n```\n\nThe `src.OpenSSL.SSL.Context.set_session_id` function is likely being tested to ensure that it correctly handles a unicode string as an argument. The test is designed to pass a unicode string to this function and then checks if a warning is raised.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_session_id`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_session_id%22%5D \"src/OpenSSL/SSL.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the unit tests for the `OpenSSL.SSL.Context` class in the `tests/test_ssl.py` file?",
          "title": "What are the unit tests for the `OpenSSL.SSL.Context` class in the `tests/test_ssl.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 485,
              "startColumn": 1,
              "endLineNumber": 596,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 725,
              "startColumn": 5,
              "endLineNumber": 732,
              "endColumn": 50
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 813,
              "startColumn": 5,
              "endLineNumber": 821,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1105,
              "startColumn": 5,
              "endLineNumber": 1112,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1569,
              "startColumn": 5,
              "endLineNumber": 1577,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1666,
              "startColumn": 5,
              "endLineNumber": 1673,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1691,
              "startColumn": 5,
              "endLineNumber": 1699,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1701,
              "startColumn": 5,
              "endLineNumber": 1710,
              "endColumn": 67
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2935,
              "startColumn": 5,
              "endLineNumber": 2949,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3501,
              "startColumn": 5,
              "endLineNumber": 3506,
              "endColumn": 40
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3508,
              "startColumn": 5,
              "endLineNumber": 3513,
              "endColumn": 40
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1333
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 9,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.__init__\",\n        \"src.OpenSSL.crypto.X509Store.load_locations\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_load_locations_fails_when_all_args_are_none`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_load_locations_fails_when_all_args_are_none%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509Store.load_locations` function. This function is directly invoked in the test and its behavior when passed None for all arguments is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509Store.test_load_locations_fails_when_all_args_are_none\": [\n        \"src.OpenSSL.crypto.X509Store.load_locations\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509Store.load_locations` function is likely being tested to ensure that it correctly raises an error when both of its arguments are None. The test is designed to pass None for both arguments to this function and then checks if an error is raised.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`load_locations`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509Store.load_locations%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the functions being tested in the unit test `tests.test_crypto.TestX509Store.test_load_locations_raises_error_on_failure`?",
          "title": "What are the functions being tested in the unit test `tests.test_crypto.TestX509Store.test_load_locations_raises_error_on_failure`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2277,
              "startColumn": 5,
              "endLineNumber": 2324,
              "endColumn": 46
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2326,
              "startColumn": 5,
              "endLineNumber": 2329,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2331,
              "startColumn": 5,
              "endLineNumber": 2338,
              "endColumn": 1
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2666,
              "startColumn": 5,
              "endLineNumber": 2671,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2683,
              "startColumn": 5,
              "endLineNumber": 2690,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2824,
              "startColumn": 5,
              "endLineNumber": 2834,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3982,
              "startColumn": 5,
              "endLineNumber": 3987,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3989,
              "startColumn": 5,
              "endLineNumber": 3994,
              "endColumn": 39
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1223
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 7,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_convert_from_cryptography_unsupported_type`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_from_cryptography_unsupported_type%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509Req.from_cryptography` function. This function is directly invoked in the test and its behavior when passed an unsupported type is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509Req.test_convert_from_cryptography_unsupported_type\": [\n        \"src.OpenSSL.crypto.X509Req.from_cryptography\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509Req.from_cryptography` function is likely being tested to ensure that it correctly raises a TypeError when passed an argument of an unsupported type. The test is designed to pass an object of an unsupported type to this function and then checks if a TypeError is raised.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some other unit tests in the `tests.test_crypto` module that involve the `OpenSSL.crypto.X509Req` class?",
          "title": "What are some other unit tests in the `tests.test_crypto` module that involve the `OpenSSL.crypto.X509Req` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1216,
              "startColumn": 5,
              "endLineNumber": 1221,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1631,
              "startColumn": 5,
              "endLineNumber": 1637,
              "endColumn": 10
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1695,
              "startColumn": 5,
              "endLineNumber": 1698,
              "endColumn": 40
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1700,
              "startColumn": 5,
              "endLineNumber": 1702,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1704,
              "startColumn": 5,
              "endLineNumber": 1709,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2226,
              "startColumn": 5,
              "endLineNumber": 2228,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2337,
              "startColumn": 71,
              "endLineNumber": 2338,
              "endColumn": 1
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2780,
              "startColumn": 5,
              "endLineNumber": 2788,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3646,
              "startColumn": 5,
              "endLineNumber": 3648,
              "endColumn": 44
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_invalid_digest_algorithm, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1377
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 11,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_invalid_digest_algorithm, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_invalid_digest_algorithm, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.X509.digest\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL._util.byte_string\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_invalid_digest_algorithm`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_invalid_digest_algorithm%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509.digest` function. This function is directly invoked in the test and its behavior when passed an unrecognized hash algorithm is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_invalid_digest_algorithm\": [\n        \"src.OpenSSL.crypto.X509.digest\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509.digest` function is likely being tested to ensure that it correctly raises a ValueError when passed an unrecognized hash algorithm. The test is designed to pass an unrecognized hash algorithm to this function and then checks if a ValueError is raised.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`digest`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.digest%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the functions being tested in the unit test `tests.test_crypto.TestX509.test_get_signature_algorithm`?",
          "title": "What are the functions being tested in the unit test `tests.test_crypto.TestX509.test_get_signature_algorithm`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 75,
              "startColumn": 1,
              "endLineNumber": 89,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1937,
              "startColumn": 1,
              "endLineNumber": 2120,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2171,
              "startColumn": 5,
              "endLineNumber": 2177,
              "endColumn": 76
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2196,
              "startColumn": 1,
              "endLineNumber": 2203,
              "endColumn": 66
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2666,
              "startColumn": 5,
              "endLineNumber": 2671,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2794,
              "startColumn": 5,
              "endLineNumber": 2802,
              "endColumn": 73
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3338,
              "startColumn": 5,
              "endLineNumber": 3346,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3361,
              "startColumn": 5,
              "endLineNumber": 3368,
              "endColumn": 45
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1257
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 8,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.text\",\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_exception_from_error_queue_nonexistent_reason`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_util.py%22%2C%22test_exception_from_error_queue_nonexistent_reason%22%5D \"tests/test_util.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL._util.exception_from_error_queue` function. This function is directly invoked in the test and its behavior when it encounters an OpenSSL error code which does not have a reason string is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_util.TestErrors.test_exception_from_error_queue_nonexistent_reason\": [\n        \"src.OpenSSL._util.exception_from_error_queue\"\n    ]\n}\n```\n\nThe `src.OpenSSL._util.exception_from_error_queue` function is likely being tested to ensure that it correctly raises a `ValueError` when it encounters an OpenSSL error code which does not have a reason string. The test is designed to put such an error into the OpenSSL error queue and then checks if a `ValueError` is raised when `exception_from_error_queue` is called.\n\nThe other function in the list, `src.OpenSSL._util.text`, is likely a helper function that is indirectly called by [`exception_from_error_queue`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2F_util.py%22%2C%22exception_from_error_queue%22%5D \"src/OpenSSL/_util.py\"). While this function is important for the overall operation, it is not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the functions being tested in the unit test `tests.test_crypto.TestFunction.test_dump_certificate_bad_type`?",
          "title": "What are the functions being tested in the unit test `tests.test_crypto.TestFunction.test_dump_certificate_bad_type`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 13,
              "startColumn": 5,
              "endLineNumber": 36,
              "endColumn": 41
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 67,
              "startColumn": 5,
              "endLineNumber": 85,
              "endColumn": 46
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 126,
              "startColumn": 5,
              "endLineNumber": 131,
              "endColumn": 21
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 156,
              "startColumn": 5,
              "endLineNumber": 175,
              "endColumn": 20
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/pytest_tracer.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 273,
              "startColumn": 62,
              "endLineNumber": 274,
              "endColumn": 1
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2824,
              "startColumn": 5,
              "endLineNumber": 2834,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2987,
              "startColumn": 5,
              "endLineNumber": 2998,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3000,
              "startColumn": 5,
              "endLineNumber": 3011,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "$mid": 1,
            "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_util.py",
            "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_util.py",
            "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_util.py",
            "scheme": "file"
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_convert_to_cryptography_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1647
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 16,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_convert_to_cryptography_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_convert_to_cryptography_key, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_certificate\",\n        \"src.OpenSSL.crypto.load_certificate\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto.X509.to_cryptography\",\n        \"src.OpenSSL.crypto.X509._from_raw_x509_ptr\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.X509.get_version\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_convert_to_cryptography_key`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_convert_to_cryptography_key%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509.to_cryptography` function. This function is directly invoked in the test and its behavior when converting an X509 object to a cryptography object is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_convert_to_cryptography_key\": [\n        \"src.OpenSSL.crypto.X509.to_cryptography\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509.to_cryptography` function is likely being tested to ensure that it correctly converts an X509 object to a cryptography object. The test is designed to load a certificate, convert it to a cryptography object using [`to_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22to_cryptography%22%5D \"src/OpenSSL/crypto.py\"), and then checks if the resulting object is an instance of [`x509.Certificate`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22x509.Certificate%22%5D \"src/OpenSSL/crypto.py\") and if its version matches the original certificate's version.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`to_cryptography`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.to_cryptography%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are some other unit tests in the `tests.test_crypto` module that involve the `OpenSSL.crypto.X509` class?",
          "title": "What are some other unit tests in the `tests.test_crypto` module that involve the `OpenSSL.crypto.X509` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2226,
              "startColumn": 5,
              "endLineNumber": 2228,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2230,
              "startColumn": 5,
              "endLineNumber": 2235,
              "endColumn": 63
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2683,
              "startColumn": 5,
              "endLineNumber": 2690,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2715,
              "startColumn": 5,
              "endLineNumber": 2725,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2727,
              "startColumn": 5,
              "endLineNumber": 2742,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2770,
              "startColumn": 5,
              "endLineNumber": 2778,
              "endColumn": 67
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2780,
              "startColumn": 5,
              "endLineNumber": 2788,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2927,
              "startColumn": 5,
              "endLineNumber": 2935,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestCRL.test_export_md5_digest, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1770
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 20,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestCRL.test_export_md5_digest, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestCRL.test_export_md5_digest, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.Revoked.set_serial\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.Revoked.set_reason\",\n        \"src.OpenSSL.crypto.CRL.export\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.Revoked.set_rev_date\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_asn1_time\",\n        \"src.OpenSSL.crypto.CRL.add_revoked\",\n        \"src.OpenSSL.crypto.Revoked._delete_reason\",\n        \"src.OpenSSL.crypto.Revoked.__init__\",\n        \"src.OpenSSL.crypto._bio_to_string\",\n        \"src.OpenSSL.crypto.CRL.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_export_md5_digest`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_export_md5_digest%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.CRL.export` function. This function is directly invoked in the test and its behavior when passed md5 as the digest function is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestCRL.test_export_md5_digest\": [\n        \"src.OpenSSL.crypto.CRL.export\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.CRL.export` function is likely being tested to ensure that it correctly uses md5 as the digest function and does not emit a deprecation warning when passed md5 as the digest function. The test is designed to export a CRL using md5 as the digest function and then checks if a deprecation warning is not emitted.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`export`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22CRL.export%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different file types supported by the `OpenSSL.CRL.export` function in the `tests.test_crypto.TestCRL` unit tests?",
          "title": "What are the different file types supported by the `OpenSSL.CRL.export` function in the `tests.test_crypto.TestCRL` unit tests?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2927,
              "startColumn": 5,
              "endLineNumber": 2935,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3231,
              "startColumn": 1,
              "endLineNumber": 3475,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3650,
              "startColumn": 5,
              "endLineNumber": 3653,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1360
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 10,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\",\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_fallback_path_is_not_file_or_dir`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_fallback_path_is_not_file_or_dir%22%5D \"tests/test_ssl.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.SSL.Context._fallback_default_verify_paths` function. This function is directly invoked in the test and its behavior when passed empty arrays or paths that do not exist is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_fallback_path_is_not_file_or_dir\": [\n        \"src.OpenSSL.SSL.Context._fallback_default_verify_paths\"\n    ]\n}\n```\n\nThe `src.OpenSSL.SSL.Context._fallback_default_verify_paths` function is likely being tested to ensure that it does not raise any errors when passed empty arrays or paths that do not exist. The test is designed to call `_fallback_default_verify_paths` with empty arrays and non-existent paths and then checks if no errors are raised.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`_fallback_default_verify_paths`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context._fallback_default_verify_paths%22%5D \"src/OpenSSL/SSL.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the functions being tested in the unit test `tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set`?",
          "title": "What are the functions being tested in the unit test `tests.test_ssl.TestContext.test_verify_no_fallback_if_env_vars_set`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2727,
              "startColumn": 5,
              "endLineNumber": 2742,
              "endColumn": 39
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2744,
              "startColumn": 5,
              "endLineNumber": 2758,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2760,
              "startColumn": 5,
              "endLineNumber": 2768,
              "endColumn": 14
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2814,
              "startColumn": 5,
              "endLineNumber": 2822,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2824,
              "startColumn": 5,
              "endLineNumber": 2834,
              "endColumn": 70
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2987,
              "startColumn": 5,
              "endLineNumber": 2998,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3000,
              "startColumn": 5,
              "endLineNumber": 3011,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1177,
              "startColumn": 5,
              "endLineNumber": 1302,
              "endColumn": 2
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1334
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 10,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.__init__\",\n        \"src.OpenSSL.SSL.Context.set_verify\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.SSL.Context.set_mode\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_set_verify_wrong_callable_arg`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_ssl.py%22%2C%22test_set_verify_wrong_callable_arg%22%5D \"tests/test_ssl.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.SSL.Context.set_verify` function. This function is directly invoked in the test and its behavior when passed a non-callable argument is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_ssl.TestContext.test_set_verify_wrong_callable_arg\": [\n        \"src.OpenSSL.SSL.Context.set_verify\"\n    ]\n}\n```\n\nThe `src.OpenSSL.SSL.Context.set_verify` function is likely being tested to ensure that it raises a `TypeError` when the second argument is not callable. The test is designed to call `set_verify` with a non-callable argument and then checks if a `TypeError` is raised.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_verify`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2FSSL.py%22%2C%22Context.set_verify%22%5D \"src/OpenSSL/SSL.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different unit tests for the `OpenSSL.SSL.Context` class in the `tests/test_ssl.py` file?",
          "title": "What are the different unit tests for the `OpenSSL.SSL.Context` class in the `tests/test_ssl.py` file?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 823,
              "startColumn": 5,
              "endLineNumber": 830,
              "endColumn": 43
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 832,
              "startColumn": 5,
              "endLineNumber": 840,
              "endColumn": 48
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1085,
              "startColumn": 5,
              "endLineNumber": 1095,
              "endColumn": 49
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1166,
              "startColumn": 5,
              "endLineNumber": 1175,
              "endColumn": 62
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1177,
              "startColumn": 5,
              "endLineNumber": 1210,
              "endColumn": 24
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1248,
              "startColumn": 5,
              "endLineNumber": 1282,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1324,
              "startColumn": 5,
              "endLineNumber": 1351,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1353,
              "startColumn": 5,
              "endLineNumber": 1378,
              "endColumn": 64
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1406,
              "startColumn": 5,
              "endLineNumber": 1449,
              "endColumn": 29
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1598,
              "startColumn": 5,
              "endLineNumber": 1606,
              "endColumn": 79
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1608,
              "startColumn": 5,
              "endLineNumber": 1616,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1618,
              "startColumn": 5,
              "endLineNumber": 1712,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_ssl.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2669,
              "startColumn": 5,
              "endLineNumber": 2682,
              "endColumn": 59
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestX509.test_set_notBefore, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1568
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 15,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestX509.test_set_notBefore, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestX509.test_set_notBefore, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509._set_boundary_time\",\n        \"src.OpenSSL.crypto.X509._get_boundary_time\",\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto._set_asn1_time\",\n        \"src.OpenSSL.crypto.X509.__init__\",\n        \"src.OpenSSL.crypto._get_asn1_time\",\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\",\n        \"src.OpenSSL.crypto._X509NameInvalidator.__init__\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_set_notBefore`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_set_notBefore%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.X509.set_notBefore` and `src.OpenSSL.crypto.X509.get_notBefore` functions. These functions are directly invoked in the test and their behavior when setting and getting the beginning of the certificate's validity period is likely what's being verified.\n\nHere's the JSON object with the functions that are likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestX509.test_set_notBefore\": [\n        \"src.OpenSSL.crypto.X509.set_notBefore\",\n        \"src.OpenSSL.crypto.X509.get_notBefore\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.X509.set_notBefore` function is likely being tested to ensure that it correctly sets the beginning of the certificate's validity period. The `src.OpenSSL.crypto.X509.get_notBefore` function is likely being tested to ensure that it correctly retrieves the beginning of the certificate's validity period. The test is designed to set the beginning of the certificate's validity period using [`set_notBefore`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22set_notBefore%22%5D \"src/OpenSSL/crypto.py\") and then checks if the set value is correctly retrieved using [`get_notBefore`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22get_notBefore%22%5D \"src/OpenSSL/crypto.py\").\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`set_notBefore`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.set_notBefore%22%5D \"src/OpenSSL/crypto.py\") and [`get_notBefore`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22X509.get_notBefore%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What are the different functions being tested in the `tests.test_crypto.TestX509` class?",
          "title": "What are the different functions being tested in the `tests.test_crypto.TestX509` class?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1216,
              "startColumn": 5,
              "endLineNumber": 1221,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1244,
              "startColumn": 5,
              "endLineNumber": 1252,
              "endColumn": 49
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1361,
              "startColumn": 9,
              "endLineNumber": 1369,
              "endColumn": 33
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1398,
              "startColumn": 45,
              "endLineNumber": 1398,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1782,
              "startColumn": 5,
              "endLineNumber": 1820,
              "endColumn": 28
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1824,
              "startColumn": 5,
              "endLineNumber": 1830,
              "endColumn": 37
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1832,
              "startColumn": 5,
              "endLineNumber": 1838,
              "endColumn": 36
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1840,
              "startColumn": 5,
              "endLineNumber": 2120,
              "endColumn": 2
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2337,
              "startColumn": 71,
              "endLineNumber": 2338,
              "endColumn": 1
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        }
      ]
    },
    {
      "message": {
        "text": "@workspace For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "id": "workspace",
              "metadata": {
                "description": "Ask about your workspace",
                "fullName": "Workspace",
                "themeIcon": {
                  "id": "code"
                },
                "hasSlashCommands": true,
                "hasFollowups": true,
                "isSecondary": true,
                "sampleRequest": "How do I build this project?",
                "supportIssueReporting": false
              }
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 1379
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 12,
              "endColumn": 2
            },
            "text": " For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}",
            "kind": "text"
          }
        ]
      },
      "variableData": {
        "variables": {},
        "message": "For the unit test with qualified path tests.test_crypto.TestCRL.test_dump_crl, what source code functions do you think the test is meant to be testing? The list of functions that are invoked through the execution of the unit test is listed in the below JSON object. However, it is not always the case that every called function is the specific thing actually being tested by the unit test. Can you please return a similar JSON object of only the functions (with their qualified path like I have shown below), that you believe the unit test is meant to test? You may want to pay attention to the naming of the unit test, and the functions themselves (comparing the function names to the unit test name), how the code of the unit tests calls functions with specific arguments, and the depth of which a function is called (some of the functions may be called directly in the unit test code, whilst others are calls made within functions). Can you also explain why you believe each function you chose is in fact being tested?\n\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL._util.make_assert.<locals>.openssl_assert\",\n        \"src.OpenSSL.crypto.dump_crl\",\n        \"src.OpenSSL.crypto.load_crl\",\n        \"src.OpenSSL.crypto._new_mem_buf\",\n        \"src.OpenSSL.crypto._new_mem_buf.<locals>.free\",\n        \"src.OpenSSL.crypto._bio_to_string\"\n    ]\n}"
      },
      "response": [
        {
          "content": {
            "value": "Determining workspace structure",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Deciding which workspace information to collect",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "content": {
            "value": "Gathering workspace info",
            "uris": {}
          },
          "kind": "progressMessage"
        },
        {
          "value": "Based on the unit test name [`test_dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22tests%2Ftest_crypto.py%22%2C%22test_dump_crl%22%5D \"tests/test_crypto.py\") and the code excerpts provided, it seems like the test is primarily meant to test the `src.OpenSSL.crypto.dump_crl` function. This function is directly invoked in the test and its behavior when dumping a CRL (Certificate Revocation List) is likely what's being verified.\n\nHere's the JSON object with the function that is likely being tested:\n\n```json\n{\n    \"tests.test_crypto.TestCRL.test_dump_crl\": [\n        \"src.OpenSSL.crypto.dump_crl\"\n    ]\n}\n```\n\nThe `src.OpenSSL.crypto.dump_crl` function is likely being tested to ensure that it correctly dumps a CRL. The test is designed to load a CRL using [`load_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22load_crl%22%5D \"src/OpenSSL/crypto.py\"), dump it using [`dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22dump_crl%22%5D \"src/OpenSSL/crypto.py\"), and then checks if the dumped CRL matches the original input.\n\nThe other functions in the list are likely helper functions or functions that are indirectly called by [`dump_crl`](command:_github.copilot.openSymbolInFile?%5B%22src%2FOpenSSL%2Fcrypto.py%22%2C%22dump_crl%22%5D \"src/OpenSSL/crypto.py\"). While these functions are important for the overall operation, they are not the primary focus of this specific test based on its name and the provided code.",
          "isTrusted": {
            "enabledCommands": [
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile",
              "_github.copilot.openRelativePath",
              "_github.copilot.openSymbolInFile"
            ]
          },
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "followups": [
        {
          "kind": "reply",
          "message": "What functions in the `OpenSSL.crypto` module are being tested in the unit test `tests.test_crypto.TestFunction.test_dump_certificate`?",
          "title": "What functions in the `OpenSSL.crypto` module are being tested in the unit test `tests.test_crypto.TestFunction.test_dump_certificate`?"
        }
      ],
      "isCanceled": false,
      "agent": {
        "id": "workspace",
        "metadata": {
          "description": "Ask about your workspace",
          "fullName": "Workspace",
          "themeIcon": {
            "id": "code"
          },
          "hasSlashCommands": true,
          "hasFollowups": true,
          "isSecondary": true,
          "sampleRequest": "How do I build this project?",
          "supportIssueReporting": false
        }
      },
      "usedContext": {
        "documents": [],
        "kind": "usedContext"
      },
      "contentReferences": [
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/src/OpenSSL/crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 582,
              "startColumn": 7,
              "endLineNumber": 582,
              "endColumn": 15
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2790,
              "startColumn": 5,
              "endLineNumber": 2792,
              "endColumn": 53
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2859,
              "startColumn": 5,
              "endLineNumber": 2874,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2876,
              "startColumn": 5,
              "endLineNumber": 2883,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2894,
              "startColumn": 5,
              "endLineNumber": 2901,
              "endColumn": 42
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2903,
              "startColumn": 5,
              "endLineNumber": 2909,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2911,
              "startColumn": 5,
              "endLineNumber": 2917,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2927,
              "startColumn": 5,
              "endLineNumber": 2935,
              "endColumn": 52
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 2937,
              "startColumn": 5,
              "endLineNumber": 2944,
              "endColumn": 47
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3324,
              "startColumn": 5,
              "endLineNumber": 3336,
              "endColumn": 38
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3338,
              "startColumn": 5,
              "endLineNumber": 3346,
              "endColumn": 51
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3361,
              "startColumn": 5,
              "endLineNumber": 3368,
              "endColumn": 45
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3491,
              "startColumn": 5,
              "endLineNumber": 3498,
              "endColumn": 56
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3500,
              "startColumn": 5,
              "endLineNumber": 3506,
              "endColumn": 30
            }
          },
          "kind": "reference"
        },
        {
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "external": "file:///home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "path": "/home/jasonho2582001/work/ucl/year-4/comp0138-individual-project-for-year-4-meng/example-repos/pyopenssl/tests/test_crypto.py",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 3650,
              "startColumn": 5,
              "endLineNumber": 3653,
              "endColumn": 70
            }
          },
          "kind": "reference"
        }
      ]
    }
  ],
  "providerId": "copilot"
}